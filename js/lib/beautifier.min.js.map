{"version":3,"sources":["webpack://beautifier/webpack/universalModuleDefinition","webpack://beautifier/webpack/bootstrap","webpack://beautifier/./js/src/core/acorn.js","webpack://beautifier/./js/src/core/inputscanner.js","webpack://beautifier/./js/src/core/tokenizer.js","webpack://beautifier/./js/src/core/options.js","webpack://beautifier/./js/src/core/output.js","webpack://beautifier/./js/src/javascript/tokenizer.js","webpack://beautifier/./js/src/core/directives.js","webpack://beautifier/./js/src/html/tokenizer.js","webpack://beautifier/./js/src/index.js","webpack://beautifier/./js/src/javascript/index.js","webpack://beautifier/./js/src/javascript/beautifier.js","webpack://beautifier/./js/src/core/token.js","webpack://beautifier/./js/src/core/tokenstream.js","webpack://beautifier/./js/src/css/index.js","webpack://beautifier/./js/src/css/beautifier.js","webpack://beautifier/./js/src/html/index.js","webpack://beautifier/./js/src/html/beautifier.js"],"names":["root","factory","exports","module","define","amd","self","windows","window","global","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nonASCIIidentifierStartChars","nonASCIIidentifierChars","identifierStart","RegExp","identifierChars","identifier","newline","lineBreak","source","allLineBreaks","isIdentifierStart","code","test","String","fromCharCode","isIdentifierChar","InputScanner","input_string","_input","_input_length","length","_position","restart","back","hasNext","next","val","charAt","peek","index","pattern","lastIndex","pattern_match","exec","testChar","match","read","readUntil","include_match","match_index","substring","readUntilAfter","peekUntilAfter","start","lookBack","testVal","toLowerCase","Token","TokenStream","TOKEN","START","RAW","EOF","Tokenizer","_tokens","_newline_count","_whitespace_before_token","_whitespace_pattern","_newline_pattern","tokenize","current","reset","previous","open_token","open_stack","comments","type","get_next_token","is_comment","add","isEmpty","comments_before","parent","is_opening","opened","push","is_closing","pop","previous_token","readWhitespace","resulting_string","create_token","current_token","text","token","nextMatch","mergeOpts","allOptions","childFieldName","finalOpts","OutputLine","_parent","_character_count","_indent_count","_items","Output","indent_string","baseIndentString","indent_cache","baseIndentLength","indent_length","raw","_lines","previous_line","current_line","space_before_token","add_outputline","set_indent","level","get_character_count","is_empty","last","item","remove_indent","trim","toString","result","join","get_line_number","add_new_line","force_newline","just_added_newline","get_code","end_with_newline","eol","sweet_code","replace","add_raw_token","x","newlines","whitespace_before","add_token","printable_token","add_space_before_token","output_length","eat_newlines","undefined","just_added_blankline","BaseTokenizer","BASETOKEN","acorn","Directives","in_array","what","arr","indexOf","START_EXPR","END_EXPR","START_BLOCK","END_BLOCK","WORD","RESERVED","SEMICOLON","STRING","EQUALS","OPERATOR","COMMA","BLOCK_COMMENT","COMMENT","DOT","UNKNOWN","directives_core","number_pattern","digit","dot_pattern","positionable_operators","split","punct","in_html_comment","punct_pattern","line_starters","reserved_words","concat","reserved_word_pattern","block_comment_pattern","comment_pattern","template_pattern","opts","_opts","_read_singles","_read_word","_read_comment","_read_string","_read_regexp","_read_xml","_read_non_javascript","_read_punctuation","sharp","comment","directives","get_directives","ignore","readIgnored","has_char_escapes","_read_string_recursive","unescape_strings","out","escaped","input_scan","matched","parseInt","unescape_string","_allow_regexp_or_xml","esc","in_char_class","startXmlRegExp","xmlRegExp","e4x","xmlStr","rootTag","isCurlyRoot","depth","isEndTag","tagName","slice","delimiter","allow_unescaped_newlines","start_sub","current_char","start_block_pattern","end_block_pattern","_directives_block_pattern","_directive_pattern","_directives_end_ignore_pattern","directive_match","input","TAG_OPEN","TAG_CLOSE","ATTRIBUTE","VALUE","TEXT","_current_tag_name","_word_pattern","indent_handlebars","_read_attribute","_read_raw_content","_read_open_close","_read_content_word","peek1","peek2","input_char","content","string_pattern","tag_name","substr","content_unformatted","unformatted","js_beautify","css_beautify","html_beautify","js","css","html","html_source","options","Beautifier","js_source_text","beautify","remove_redundant_indentation","output","frame","multiline_frame","MODE","ForInitializer","Conditional","start_index","start_line_index","ltrim","validPositionValues","OPERATOR_POSITION","list","generateMapFromStrings","OPERATOR_POSITION_BEFORE_OR_PRESERVE","before_newline","preserve_newline","BlockStatement","Statement","ObjectLiteral","ArrayLiteral","Expression","tokens","tokenizer","last_type","last_last_text","flags","previous_flags","flag_store","prefix","handlers","opt","create_flags","flags_base","next_indent_level","indentation_level","line_indent_level","last_text","last_word","declaration_statement","declaration_assignment","inline_frame","if_block","else_block","do_block","do_while","import_block","in_case_statement","in_case","case_body","ternary_depth","start_of_statement","handle_whitespace_and_comments","next_mode","set_mode","print_token","indent","space_in_paren","is_array","keep_array_indentation","print_newline","space_before_conditional","start_of_object_property","allow_wrap_or_preserved_newline","space_after_anon_function","restore_mode","space_in_empty_paren","next_token","second_token","empty_anonymous_function","brace_preserve_inline","check_token","brace_style","is_special_word","empty_braces","handle_word","isGeneratorAsterisk","isUnary","preserve_statement_flags","operator_position","space_before","space_after","in_ternary","preserve_newlines","isColon","isTernaryColon","isOtherColon","after_newline","is_expression","comma_first","preserve","test_output_raw","j","lines","idx","split_linebreaks","javadoc","starless","lastIndent","lastIndentLength","line","all_lines_start_with","len","each_line_matches_indent","unindent_chained_methods","deindent","break_chained_methods","braces_on_own_line","brace_style_split","bs","indent_size","indent_char","max_preserve_newlines","jslint_happy","wrap_line_length","opPosition","Error","sanitizeOperatorPosition","indent_with_tabs","preindent_index","local_token","keep_whitespace","temp_token","newline_restricted_tokens","force_linewrap","shouldPreserveOrForce","shouldPrintOperatorNewline","print_token_line_indentation","popped","word","parent_token","_tokens_length","_parent_token","source_text","indentSize","indentCharacter","selectorSeparatorNewline","selector_separator_newline","newline_between_rules","space_around_combinator","space_around_selector_separator","ch","whitespaceChar","whitespacePattern","parenLevel","eatString","endChars","eatWhitespace","allowAtLeastOneNewLine","isFirstNewLine","foundNestedPseudoClass","openParen","indentLevel","nestedLevel","singleIndent","Array","print_string","output_string","preserveSingleSpace","isAfterSpace","insideRule","insidePropertyValue","enteringConditionalGroup","insideAtExtend","variableOrRule","NESTED_AT_RULE","CONDITIONAL_GROUP_RULE","@page","@font-face","@keyframes","@media","@supports","@document","multi_parser","indent_inner_html","indent_body_inner_html","indent_head_inner_html","indent_character","inline_tags","wrap_attributes","wrap_attributes_indent_size","is_wrap_attributes_force","is_wrap_attributes_force_expand_multiline","is_wrap_attributes_force_aligned","is_wrap_attributes_aligned_multiple","extra_liners","max_char","inline","isNaN","_options","parser_token","tags","tag","indent_level","last_token","token_text","indent_content","Utils","whitespace","single_token","void_elements","record_tag","new_tag","retrieve_tag","temp_parent","indent_to_tag","tag_list","get_tag","raw_token","tag_start_char","is_inline_tag","is_unformatted","is_content_unformatted","is_opening_tag","is_closing_tag","multiline_content","start_tag_token","space","attr_count","has_wrapped_attrs","tag_reading_finished","tag_check","alignment_size","alignment_string","custom_beautifier","traverse_whitespace","print_indentation","add_text_item","peekEquals","peekValue","search","line_char_count","wrapped","print_space_or_wrap","indentAttrs","force_first_attr_wrap","peek_token","is_only_attribute","peek_index","get_full_indent","printer","add_multiline_item","last_newline_index","lastIndexOf","force","previous_rtrim","rtrim","count_chars","print_token_raw","unindent","last_tag_token","foundIfOnCurrentLine","lastCheckedOutput","_beautifier","script_indent_level","indent_scripts","indentation","Child_options","child_options","_level","reindent"],"mappings":"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","file":"beautifier.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"beautifier\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"beautifier\"] = factory();\n\telse\n\t\troot[\"beautifier\"] = factory();\n})(typeof self !== 'undefined' ? self : typeof windows !== 'undefined' ? window : typeof global !== 'undefined' ? global : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","/* jshint curly: false */\n// This section of code is taken from acorn.\n//\n// Acorn was written by Marijn Haverbeke and released under an MIT\n// license. The Unicode regexps (for identifiers and whitespace) were\n// taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/marijnh/acorn.git\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/; // jshint ignore:line\nvar baseASCIIidentifierStartChars = \"\\x24\\x40\\x41-\\x5a\\x5f\\x61-\\x7a\";\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar baseASCIIidentifierChars = \"\\x24\\x30-\\x39\\x41-\\x5a\\x5f\\x61-\\x7a\";\nvar nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n//var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n//var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nvar identifierStart = new RegExp(\"[\" + baseASCIIidentifierStartChars + nonASCIIidentifierStartChars + \"]\");\nvar identifierChars = new RegExp(\"[\" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nexports.identifier = new RegExp(\"[\" + baseASCIIidentifierStartChars + nonASCIIidentifierStartChars + \"][\" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]*\", 'g');\n\n\n// Whether a single character denotes a newline.\n\nexports.newline = /[\\n\\r\\u2028\\u2029]/;\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n// in javascript, these two differ\n// in python they are the same, different methods are called on them\nexports.lineBreak = new RegExp('\\r\\n|' + exports.newline.source);\nexports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');\n\n\n// Test whether a given character code starts an identifier.\n\nexports.isIdentifierStart = function(code) {\n  // // permit $ (36) and @ (64). @ is used in ES7 decorators.\n  // if (code < 65) return code === 36 || code === 64;\n  // // 65 through 91 are uppercase letters.\n  // if (code < 91) return true;\n  // // permit _ (95).\n  // if (code < 97) return code === 95;\n  // // 97 through 123 are lowercase letters.\n  // if (code < 123) return true;\n  return identifierStart.test(String.fromCharCode(code));\n};\n\n// Test whether a given character is part of an identifier.\n\nexports.isIdentifierChar = function(code) {\n  // if (code < 48) return code === 36;\n  // if (code < 58) return true;\n  // if (code < 65) return false;\n  // if (code < 91) return true;\n  // if (code < 97) return code === 95;\n  // if (code < 123) return true;\n  return identifierChars.test(String.fromCharCode(code));\n};","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nfunction InputScanner(input_string) {\n  this._input = input_string || '';\n  this._input_length = this._input.length;\n  this._position = 0;\n}\n\nInputScanner.prototype.restart = function() {\n  this._position = 0;\n};\n\nInputScanner.prototype.back = function() {\n  if (this._position > 0) {\n    this._position -= 1;\n  }\n};\n\nInputScanner.prototype.hasNext = function() {\n  return this._position < this._input_length;\n};\n\nInputScanner.prototype.next = function() {\n  var val = null;\n  if (this.hasNext()) {\n    val = this._input.charAt(this._position);\n    this._position += 1;\n  }\n  return val;\n};\n\nInputScanner.prototype.peek = function(index) {\n  var val = null;\n  index = index || 0;\n  index += this._position;\n  if (index >= 0 && index < this._input_length) {\n    val = this._input.charAt(index);\n  }\n  return val;\n};\n\nInputScanner.prototype.test = function(pattern, index) {\n  index = index || 0;\n  index += this._position;\n  pattern.lastIndex = index;\n\n  if (index >= 0 && index < this._input_length) {\n    var pattern_match = pattern.exec(this._input);\n    return pattern_match && pattern_match.index === index;\n  } else {\n    return false;\n  }\n};\n\nInputScanner.prototype.testChar = function(pattern, index) {\n  // test one character regex match\n  var val = this.peek(index);\n  return val !== null && pattern.test(val);\n};\n\nInputScanner.prototype.match = function(pattern) {\n  pattern.lastIndex = this._position;\n  var pattern_match = pattern.exec(this._input);\n  if (pattern_match && pattern_match.index === this._position) {\n    this._position += pattern_match[0].length;\n  } else {\n    pattern_match = null;\n  }\n  return pattern_match;\n};\n\nInputScanner.prototype.read = function(pattern) {\n  var val = '';\n  var match = this.match(pattern);\n  if (match) {\n    val = match[0];\n  }\n  return val;\n};\n\nInputScanner.prototype.readUntil = function(pattern, include_match) {\n  var val = '';\n  var match_index = this._position;\n  pattern.lastIndex = this._position;\n  var pattern_match = pattern.exec(this._input);\n  if (pattern_match) {\n    if (include_match) {\n      match_index = pattern_match.index + pattern_match[0].length;\n    } else {\n      match_index = pattern_match.index;\n    }\n  } else {\n    match_index = this._input_length;\n  }\n\n  val = this._input.substring(this._position, match_index);\n  this._position = match_index;\n  return val;\n};\n\nInputScanner.prototype.readUntilAfter = function(pattern) {\n  return this.readUntil(pattern, true);\n};\n\n/* css beautifier legacy helpers */\nInputScanner.prototype.peekUntilAfter = function(pattern) {\n  var start = this._position;\n  var val = this.readUntilAfter(pattern);\n  this._position = start;\n  return val;\n};\n\nInputScanner.prototype.lookBack = function(testVal) {\n  var start = this._position - 1;\n  return start >= testVal.length && this._input.substring(start - testVal.length, start)\n    .toLowerCase() === testVal;\n};\n\n\nmodule.exports.InputScanner = InputScanner;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar InputScanner = require('../core/inputscanner').InputScanner;\nvar Token = require('../core/token').Token;\nvar TokenStream = require('../core/tokenstream').TokenStream;\n\nvar TOKEN = {\n  START: 'TK_START',\n  RAW: 'TK_RAW',\n  EOF: 'TK_EOF'\n};\n\nvar Tokenizer = function(input_string) { // jshint unused:false\n  this._input = new InputScanner(input_string);\n  this._tokens = null;\n  this._newline_count = 0;\n  this._whitespace_before_token = '';\n\n  this._whitespace_pattern = /[\\n\\r\\u2028\\u2029\\t ]+/g;\n  this._newline_pattern = /([\\t ]*)(\\r\\n|[\\n\\r\\u2028\\u2029])?/g;\n};\n\nTokenizer.prototype.tokenize = function() {\n  this._input.restart();\n  this._tokens = new TokenStream();\n\n  this.reset();\n\n  var current;\n  var previous = new Token(TOKEN.START, '');\n  var open_token = null;\n  var open_stack = [];\n  var comments = new TokenStream();\n\n  while (previous.type !== TOKEN.EOF) {\n    current = this.get_next_token(previous, open_token);\n    while (this.is_comment(current)) {\n      comments.add(current);\n      current = this.get_next_token(previous, open_token);\n    }\n\n    if (!comments.isEmpty()) {\n      current.comments_before = comments;\n      comments = new TokenStream();\n    }\n\n    current.parent = open_token;\n\n    if (this.is_opening(current)) {\n      current.opened = open_token;\n      open_stack.push(open_token);\n      open_token = current;\n    } else if (open_token && this.is_closing(current, open_token)) {\n      current.opened = open_token;\n      open_token = open_stack.pop();\n      current.parent = open_token;\n    }\n\n    current.previous = previous;\n\n    this._tokens.add(current);\n    previous = current;\n  }\n\n  return this._tokens;\n};\n\n\nTokenizer.prototype.reset = function() {};\n\nTokenizer.prototype.get_next_token = function(previous_token, open_token) { // jshint unused:false\n  this.readWhitespace();\n  var resulting_string = this._input.read(/.+/g);\n  if (resulting_string) {\n    return this.create_token(TOKEN.RAW, resulting_string);\n  } else {\n    return this.create_token(TOKEN.EOF, '');\n  }\n};\n\n\nTokenizer.prototype.is_comment = function(current_token) { // jshint unused:false\n  return false;\n};\n\nTokenizer.prototype.is_opening = function(current_token) { // jshint unused:false\n  return false;\n};\n\nTokenizer.prototype.is_closing = function(current_token, open_token) { // jshint unused:false\n  return false;\n};\n\nTokenizer.prototype.create_token = function(type, text) {\n  var token = new Token(type, text, this._newline_count, this._whitespace_before_token);\n  this._newline_count = 0;\n  this._whitespace_before_token = '';\n  return token;\n};\n\nTokenizer.prototype.readWhitespace = function() {\n  var resulting_string = this._input.read(this._whitespace_pattern);\n  if (resulting_string !== '') {\n    if (resulting_string === ' ') {\n      this._whitespace_before_token = resulting_string;\n    } else {\n      this._newline_pattern.lastIndex = 0;\n      var nextMatch = this._newline_pattern.exec(resulting_string);\n      while (nextMatch[2]) {\n        this._newline_count += 1;\n        nextMatch = this._newline_pattern.exec(resulting_string);\n      }\n      this._whitespace_before_token = nextMatch[1];\n    }\n  }\n};\n\n\n\nmodule.exports.Tokenizer = Tokenizer;\nmodule.exports.TOKEN = TOKEN;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\n// merges child options up with the parent options object\n// Example: obj = {a: 1, b: {a: 2}}\n//          mergeOpts(obj, 'b')\n//\n//          Returns: {a: 2, b: {a: 2}}\nfunction mergeOpts(allOptions, childFieldName) {\n  var finalOpts = {};\n  var name;\n\n  for (name in allOptions) {\n    if (name !== childFieldName) {\n      finalOpts[name] = allOptions[name];\n    }\n  }\n\n  //merge in the per type settings for the childFieldName\n  if (childFieldName in allOptions) {\n    for (name in allOptions[childFieldName]) {\n      finalOpts[name] = allOptions[childFieldName][name];\n    }\n  }\n  return finalOpts;\n}\n\nmodule.exports.mergeOpts = mergeOpts;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nfunction OutputLine(parent) {\n  this._parent = parent;\n  this._character_count = 0;\n  // use indent_count as a marker for this._lines that have preserved indentation\n  this._indent_count = -1;\n\n  this._items = [];\n}\n\nOutputLine.prototype.set_indent = function(level) {\n  this._character_count = this._parent.baseIndentLength + level * this._parent.indent_length;\n  this._indent_count = level;\n};\n\nOutputLine.prototype.get_character_count = function() {\n  return this._character_count;\n};\n\nOutputLine.prototype.is_empty = function() {\n  return this._items.length === 0;\n};\n\nOutputLine.prototype.last = function() {\n  if (!this.is_empty()) {\n    return this._items[this._items.length - 1];\n  } else {\n    return null;\n  }\n};\n\nOutputLine.prototype.push = function(item) {\n  this._items.push(item);\n  this._character_count += item.length;\n};\n\nOutputLine.prototype.pop = function() {\n  var item = null;\n  if (!this.is_empty()) {\n    item = this._items.pop();\n    this._character_count -= item.length;\n  }\n  return item;\n};\n\nOutputLine.prototype.remove_indent = function() {\n  if (this._indent_count > 0) {\n    this._indent_count -= 1;\n    this._character_count -= this._parent.indent_length;\n  }\n};\n\nOutputLine.prototype.trim = function() {\n  while (this.last() === ' ') {\n    this._items.pop();\n    this._character_count -= 1;\n  }\n};\n\nOutputLine.prototype.toString = function() {\n  var result = '';\n  if (!this.is_empty()) {\n    if (this._indent_count >= 0) {\n      result = this._parent.indent_cache[this._indent_count];\n    }\n    result += this._items.join('');\n  }\n  return result;\n};\n\n\nfunction Output(indent_string, baseIndentString) {\n  baseIndentString = baseIndentString || '';\n  this.indent_cache = [baseIndentString];\n  this.baseIndentLength = baseIndentString.length;\n  this.indent_length = indent_string.length;\n  this.raw = false;\n\n  this._lines = [];\n  this.baseIndentString = baseIndentString;\n  this.indent_string = indent_string;\n  this.previous_line = null;\n  this.current_line = null;\n  this.space_before_token = false;\n  // initialize\n  this.add_outputline();\n}\n\nOutput.prototype.add_outputline = function() {\n  this.previous_line = this.current_line;\n  this.current_line = new OutputLine(this);\n  this._lines.push(this.current_line);\n};\n\nOutput.prototype.get_line_number = function() {\n  return this._lines.length;\n};\n\n// Using object instead of string to allow for later expansion of info about each line\nOutput.prototype.add_new_line = function(force_newline) {\n  if (this.get_line_number() === 1 && this.just_added_newline()) {\n    return false; // no newline on start of file\n  }\n\n  if (force_newline || !this.just_added_newline()) {\n    if (!this.raw) {\n      this.add_outputline();\n    }\n    return true;\n  }\n\n  return false;\n};\n\nOutput.prototype.get_code = function(end_with_newline, eol) {\n  var sweet_code = this._lines.join('\\n').replace(/[\\r\\n\\t ]+$/, '');\n\n  if (end_with_newline) {\n    sweet_code += '\\n';\n  }\n\n  if (eol !== '\\n') {\n    sweet_code = sweet_code.replace(/[\\n]/g, eol);\n  }\n\n  return sweet_code;\n};\n\nOutput.prototype.set_indent = function(level) {\n  // Never indent your first output indent at the start of the file\n  if (this._lines.length > 1) {\n    while (level >= this.indent_cache.length) {\n      this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);\n    }\n\n    this.current_line.set_indent(level);\n    return true;\n  }\n  this.current_line.set_indent(0);\n  return false;\n};\n\nOutput.prototype.add_raw_token = function(token) {\n  for (var x = 0; x < token.newlines; x++) {\n    this.add_outputline();\n  }\n  this.current_line.push(token.whitespace_before);\n  this.current_line.push(token.text);\n  this.space_before_token = false;\n};\n\nOutput.prototype.add_token = function(printable_token) {\n  this.add_space_before_token();\n  this.current_line.push(printable_token);\n};\n\nOutput.prototype.add_space_before_token = function() {\n  if (this.space_before_token && !this.just_added_newline()) {\n    this.current_line.push(' ');\n  }\n  this.space_before_token = false;\n};\n\nOutput.prototype.remove_indent = function(index) {\n  var output_length = this._lines.length;\n  while (index < output_length) {\n    this._lines[index].remove_indent();\n    index++;\n  }\n};\n\nOutput.prototype.trim = function(eat_newlines) {\n  eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;\n\n  this.current_line.trim(this.indent_string, this.baseIndentString);\n\n  while (eat_newlines && this._lines.length > 1 &&\n    this.current_line.is_empty()) {\n    this._lines.pop();\n    this.current_line = this._lines[this._lines.length - 1];\n    this.current_line.trim();\n  }\n\n  this.previous_line = this._lines.length > 1 ? this._lines[this._lines.length - 2] : null;\n};\n\nOutput.prototype.just_added_newline = function() {\n  return this.current_line.is_empty();\n};\n\nOutput.prototype.just_added_blankline = function() {\n  if (this.just_added_newline()) {\n    if (this._lines.length === 1) {\n      return true; // start of the file and newline = blank\n    }\n\n    var line = this._lines[this._lines.length - 2];\n    return line.is_empty();\n  }\n  return false;\n};\n\n\nmodule.exports.Output = Output;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar InputScanner = require('../core/inputscanner').InputScanner;\nvar BaseTokenizer = require('../core/tokenizer').Tokenizer;\nvar BASETOKEN = require('../core/tokenizer').TOKEN;\nvar acorn = require('../core/acorn');\nvar Directives = require('../core/directives').Directives;\n\nfunction in_array(what, arr) {\n  return arr.indexOf(what) !== -1;\n}\n\n\nvar TOKEN = {\n  START_EXPR: 'TK_START_EXPR',\n  END_EXPR: 'TK_END_EXPR',\n  START_BLOCK: 'TK_START_BLOCK',\n  END_BLOCK: 'TK_END_BLOCK',\n  WORD: 'TK_WORD',\n  RESERVED: 'TK_RESERVED',\n  SEMICOLON: 'TK_SEMICOLON',\n  STRING: 'TK_STRING',\n  EQUALS: 'TK_EQUALS',\n  OPERATOR: 'TK_OPERATOR',\n  COMMA: 'TK_COMMA',\n  BLOCK_COMMENT: 'TK_BLOCK_COMMENT',\n  COMMENT: 'TK_COMMENT',\n  DOT: 'TK_DOT',\n  UNKNOWN: 'TK_UNKNOWN',\n  START: BASETOKEN.START,\n  RAW: BASETOKEN.RAW,\n  EOF: BASETOKEN.EOF\n};\n\n\nvar directives_core = new Directives(/\\/\\*/, /\\*\\//);\n\nvar number_pattern = /0[xX][0123456789abcdefABCDEF]*|0[oO][01234567]*|0[bB][01]*|\\d+n|(?:\\.\\d+|\\d+\\.?\\d*)(?:[eE][+-]?\\d+)?/g;\n\nvar digit = /[0-9]/;\n\n// Dot \".\" must be distinguished from \"...\" and decimal\nvar dot_pattern = /[^\\d\\.]/;\n\nvar positionable_operators = (\n  \">>> === !== \" +\n  \"<< && >= ** != == <= >> || \" +\n  \"< / - + > : & % ? ^ | *\").split(' ');\n\n// IMPORTANT: this must be sorted longest to shortest or tokenizing many not work.\n// Also, you must update possitionable operators separately from punct\nvar punct =\n  \">>>= \" +\n  \"... >>= <<= === >>> !== **= \" +\n  \"=> ^= :: /= << <= == && -= >= >> != -- += ** || ++ %= &= *= |= \" +\n  \"= ! ? > < : / ^ - + * & % ~ |\";\n\npunct = punct.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, \"\\\\$&\");\npunct = punct.replace(/ /g, '|');\n\nvar punct_pattern = new RegExp(punct, 'g');\n\n// words which should always start on new line.\nvar line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');\nvar reserved_words = line_starters.concat(['do', 'in', 'of', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);\nvar reserved_word_pattern = new RegExp('^(?:' + reserved_words.join('|') + ')$');\n\n//  /* ... */ comment ends with nearest */ or end of file\nvar block_comment_pattern = /\\/\\*(?:[\\s\\S]*?)((?:\\*\\/)|$)/g;\n\n// comment ends just before nearest linefeed or end of file\nvar comment_pattern = /\\/\\/(?:[^\\n\\r\\u2028\\u2029]*)/g;\n\nvar template_pattern = /(?:(?:<\\?php|<\\?=)[\\s\\S]*?\\?>)|(?:<%[\\s\\S]*?%>)/g;\n\nvar in_html_comment;\n\nvar Tokenizer = function(input_string, opts) {\n  BaseTokenizer.call(this, input_string);\n  this._opts = opts;\n  this.positionable_operators = positionable_operators;\n  this.line_starters = line_starters;\n};\nTokenizer.prototype = new BaseTokenizer();\n\nTokenizer.prototype.is_comment = function(current_token) {\n  return current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.BLOCK_COMMENT || current_token.type === TOKEN.UNKNOWN;\n};\n\nTokenizer.prototype.is_opening = function(current_token) {\n  return current_token.type === TOKEN.START_BLOCK || current_token.type === TOKEN.START_EXPR;\n};\n\nTokenizer.prototype.is_closing = function(current_token, open_token) {\n  return (current_token.type === TOKEN.END_BLOCK || current_token.type === TOKEN.END_EXPR) &&\n    (open_token && (\n      (current_token.text === ']' && open_token.text === '[') ||\n      (current_token.text === ')' && open_token.text === '(') ||\n      (current_token.text === '}' && open_token.text === '{')));\n};\n\nTokenizer.prototype.reset = function() {\n  in_html_comment = false;\n};\n\nTokenizer.prototype.get_next_token = function(previous_token, open_token) { // jshint unused:false\n  this.readWhitespace();\n  var token = null;\n  var c = this._input.peek();\n\n  token = token || this._read_singles(c);\n  token = token || this._read_word(previous_token);\n  token = token || this._read_comment(c);\n  token = token || this._read_string(c);\n  token = token || this._read_regexp(c, previous_token);\n  token = token || this._read_xml(c, previous_token);\n  token = token || this._read_non_javascript(c);\n  token = token || this._read_punctuation();\n  token = token || this.create_token(TOKEN.UNKNOWN, this._input.next());\n\n  return token;\n};\n\nTokenizer.prototype._read_word = function(previous_token) {\n  var resulting_string;\n  resulting_string = this._input.read(acorn.identifier);\n  if (resulting_string !== '') {\n    if (!(previous_token.type === TOKEN.DOT ||\n        (previous_token.type === TOKEN.RESERVED && (previous_token.text === 'set' || previous_token.text === 'get'))) &&\n      reserved_word_pattern.test(resulting_string)) {\n      if (resulting_string === 'in' || resulting_string === 'of') { // hack for 'in' and 'of' operators\n        return this.create_token(TOKEN.OPERATOR, resulting_string);\n      }\n      return this.create_token(TOKEN.RESERVED, resulting_string);\n    }\n\n    return this.create_token(TOKEN.WORD, resulting_string);\n  }\n\n  resulting_string = this._input.read(number_pattern);\n  if (resulting_string !== '') {\n    return this.create_token(TOKEN.WORD, resulting_string);\n  }\n};\n\nTokenizer.prototype._read_singles = function(c) {\n  var token = null;\n  if (c === null) {\n    token = this.create_token(TOKEN.EOF, '');\n  } else if (c === '(' || c === '[') {\n    token = this.create_token(TOKEN.START_EXPR, c);\n  } else if (c === ')' || c === ']') {\n    token = this.create_token(TOKEN.END_EXPR, c);\n  } else if (c === '{') {\n    token = this.create_token(TOKEN.START_BLOCK, c);\n  } else if (c === '}') {\n    token = this.create_token(TOKEN.END_BLOCK, c);\n  } else if (c === ';') {\n    token = this.create_token(TOKEN.SEMICOLON, c);\n  } else if (c === '.' && dot_pattern.test(this._input.peek(1))) {\n    token = this.create_token(TOKEN.DOT, c);\n  } else if (c === ',') {\n    token = this.create_token(TOKEN.COMMA, c);\n  }\n\n  if (token) {\n    this._input.next();\n  }\n  return token;\n};\n\nTokenizer.prototype._read_punctuation = function() {\n  var resulting_string = this._input.read(punct_pattern);\n\n  if (resulting_string !== '') {\n    if (resulting_string === '=') {\n      return this.create_token(TOKEN.EQUALS, resulting_string);\n    } else {\n      return this.create_token(TOKEN.OPERATOR, resulting_string);\n    }\n  }\n};\n\nTokenizer.prototype._read_non_javascript = function(c) {\n  var resulting_string = '';\n\n  if (c === '#') {\n    c = this._input.next();\n\n    if (this._tokens.isEmpty() && this._input.peek() === '!') {\n      // shebang\n      resulting_string = c;\n      while (this._input.hasNext() && c !== '\\n') {\n        c = this._input.next();\n        resulting_string += c;\n      }\n      return this.create_token(TOKEN.UNKNOWN, resulting_string.trim() + '\\n');\n    }\n\n    // Spidermonkey-specific sharp variables for circular references. Considered obsolete.\n    var sharp = '#';\n    if (this._input.hasNext() && this._input.testChar(digit)) {\n      do {\n        c = this._input.next();\n        sharp += c;\n      } while (this._input.hasNext() && c !== '#' && c !== '=');\n      if (c === '#') {\n        //\n      } else if (this._input.peek() === '[' && this._input.peek(1) === ']') {\n        sharp += '[]';\n        this._input.next();\n        this._input.next();\n      } else if (this._input.peek() === '{' && this._input.peek(1) === '}') {\n        sharp += '{}';\n        this._input.next();\n        this._input.next();\n      }\n      return this.create_token(TOKEN.WORD, sharp);\n    }\n\n    this._input.back();\n\n  } else if (c === '<') {\n    if (this._input.peek(1) === '?' || this._input.peek(1) === '%') {\n      resulting_string = this._input.read(template_pattern);\n      if (resulting_string) {\n        resulting_string = resulting_string.replace(acorn.allLineBreaks, '\\n');\n        return this.create_token(TOKEN.STRING, resulting_string);\n      }\n    } else if (this._input.match(/<\\!--/g)) {\n      c = '<!--';\n      while (this._input.hasNext() && !this._input.testChar(acorn.newline)) {\n        c += this._input.next();\n      }\n      in_html_comment = true;\n      return this.create_token(TOKEN.COMMENT, c);\n    }\n  } else if (c === '-' && in_html_comment && this._input.match(/-->/g)) {\n    in_html_comment = false;\n    return this.create_token(TOKEN.COMMENT, '-->');\n  }\n\n  return null;\n};\n\nTokenizer.prototype._read_comment = function(c) {\n  var token = null;\n  if (c === '/') {\n    var comment = '';\n    if (this._input.peek(1) === '*') {\n      // peek for comment /* ... */\n      comment = this._input.read(block_comment_pattern);\n      var directives = directives_core.get_directives(comment);\n      if (directives && directives.ignore === 'start') {\n        comment += directives_core.readIgnored(this._input);\n      }\n      comment = comment.replace(acorn.allLineBreaks, '\\n');\n      token = this.create_token(TOKEN.BLOCK_COMMENT, comment);\n      token.directives = directives;\n    } else if (this._input.peek(1) === '/') {\n      // peek for comment // ...\n      comment = this._input.read(comment_pattern);\n      token = this.create_token(TOKEN.COMMENT, comment);\n    }\n  }\n  return token;\n};\n\nTokenizer.prototype._read_string = function(c) {\n  if (c === '`' || c === \"'\" || c === '\"') {\n    var resulting_string = this._input.next();\n    this.has_char_escapes = false;\n\n    if (c === '`') {\n      resulting_string += this._read_string_recursive('`', true, '${');\n    } else {\n      resulting_string += this._read_string_recursive(c);\n    }\n\n    if (this.has_char_escapes && this._opts.unescape_strings) {\n      resulting_string = unescape_string(resulting_string);\n    }\n    if (this._input.peek() === c) {\n      resulting_string += this._input.next();\n    }\n\n    return this.create_token(TOKEN.STRING, resulting_string);\n  }\n\n  return null;\n};\n\nTokenizer.prototype._allow_regexp_or_xml = function(previous_token) {\n  // regex and xml can only appear in specific locations during parsing\n  return (previous_token.type === TOKEN.RESERVED && in_array(previous_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||\n    (previous_token.type === TOKEN.END_EXPR && previous_token.text === ')' &&\n      previous_token.opened.previous.type === TOKEN.RESERVED && in_array(previous_token.opened.previous.text, ['if', 'while', 'for'])) ||\n    (in_array(previous_token.type, [TOKEN.COMMENT, TOKEN.START_EXPR, TOKEN.START_BLOCK, TOKEN.START,\n      TOKEN.END_BLOCK, TOKEN.OPERATOR, TOKEN.EQUALS, TOKEN.EOF, TOKEN.SEMICOLON, TOKEN.COMMA\n    ]));\n};\n\nTokenizer.prototype._read_regexp = function(c, previous_token) {\n\n  if (c === '/' && this._allow_regexp_or_xml(previous_token)) {\n    // handle regexp\n    //\n    var resulting_string = this._input.next();\n    var esc = false;\n\n    var in_char_class = false;\n    while (this._input.hasNext() &&\n      ((esc || in_char_class || this._input.peek() !== c) &&\n        !this._input.testChar(acorn.newline))) {\n      resulting_string += this._input.peek();\n      if (!esc) {\n        esc = this._input.peek() === '\\\\';\n        if (this._input.peek() === '[') {\n          in_char_class = true;\n        } else if (this._input.peek() === ']') {\n          in_char_class = false;\n        }\n      } else {\n        esc = false;\n      }\n      this._input.next();\n    }\n\n    if (this._input.peek() === c) {\n      resulting_string += this._input.next();\n\n      // regexps may have modifiers /regexp/MOD , so fetch those, too\n      // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.\n      resulting_string += this._input.read(acorn.identifier);\n    }\n    return this.create_token(TOKEN.STRING, resulting_string);\n  }\n  return null;\n};\n\n\nvar startXmlRegExp = /<()([-a-zA-Z:0-9_.]+|{[\\s\\S]+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{[\\s\\S]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{[\\s\\S]+?}))*\\s*(\\/?)\\s*>/g;\nvar xmlRegExp = /[\\s\\S]*?<(\\/?)([-a-zA-Z:0-9_.]+|{[\\s\\S]+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{[\\s\\S]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{[\\s\\S]+?}))*\\s*(\\/?)\\s*>/g;\n\nTokenizer.prototype._read_xml = function(c, previous_token) {\n\n  if (this._opts.e4x && c === \"<\" && this._input.test(startXmlRegExp) && this._allow_regexp_or_xml(previous_token)) {\n    // handle e4x xml literals\n    //\n    var xmlStr = '';\n    var match = this._input.match(startXmlRegExp);\n    if (match) {\n      // Trim root tag to attempt to\n      var rootTag = match[2].replace(/^{\\s+/, '{').replace(/\\s+}$/, '}');\n      var isCurlyRoot = rootTag.indexOf('{') === 0;\n      var depth = 0;\n      while (match) {\n        var isEndTag = !!match[1];\n        var tagName = match[2];\n        var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === \"![CDATA[\");\n        if (!isSingletonTag &&\n          (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\\s+/, '{').replace(/\\s+}$/, '}')))) {\n          if (isEndTag) {\n            --depth;\n          } else {\n            ++depth;\n          }\n        }\n        xmlStr += match[0];\n        if (depth <= 0) {\n          break;\n        }\n        match = this._input.match(xmlRegExp);\n      }\n      // if we didn't close correctly, keep unformatted.\n      if (!match) {\n        xmlStr += this._input.match(/[\\s\\S]*/g)[0];\n      }\n      xmlStr = xmlStr.replace(acorn.allLineBreaks, '\\n');\n      return this.create_token(TOKEN.STRING, xmlStr);\n    }\n  }\n\n  return null;\n};\n\nfunction unescape_string(s) {\n  // You think that a regex would work for this\n  // return s.replace(/\\\\x([0-9a-f]{2})/gi, function(match, val) {\n  //         return String.fromCharCode(parseInt(val, 16));\n  //     })\n  // However, dealing with '\\xff', '\\\\xff', '\\\\\\xff' makes this more fun.\n  var out = '',\n    escaped = 0;\n\n  var input_scan = new InputScanner(s);\n  var matched = null;\n\n  while (input_scan.hasNext()) {\n    // Keep any whitespace, non-slash characters\n    // also keep slash pairs.\n    matched = input_scan.match(/([\\s]|[^\\\\]|\\\\\\\\)+/g);\n\n    if (matched) {\n      out += matched[0];\n    }\n\n    if (input_scan.peek() === '\\\\') {\n      input_scan.next();\n      if (input_scan.peek() === 'x') {\n        matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);\n      } else if (input_scan.peek() === 'u') {\n        matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);\n      } else {\n        out += '\\\\';\n        if (input_scan.hasNext()) {\n          out += input_scan.next();\n        }\n        continue;\n      }\n\n      // If there's some error decoding, return the original string\n      if (!matched) {\n        return s;\n      }\n\n      escaped = parseInt(matched[1], 16);\n\n      if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {\n        // we bail out on \\x7f..\\xff,\n        // leaving whole string escaped,\n        // as it's probably completely binary\n        return s;\n      } else if (escaped >= 0x00 && escaped < 0x20) {\n        // leave 0x00...0x1f escaped\n        out += '\\\\' + matched[0];\n        continue;\n      } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {\n        // single-quote, apostrophe, backslash - escape these\n        out += '\\\\' + String.fromCharCode(escaped);\n      } else {\n        out += String.fromCharCode(escaped);\n      }\n    }\n  }\n\n  return out;\n}\n\n// handle string\n//\nTokenizer.prototype._read_string_recursive = function(delimiter, allow_unescaped_newlines, start_sub) {\n  // Template strings can travers lines without escape characters.\n  // Other strings cannot\n  var current_char;\n  var resulting_string = '';\n  var esc = false;\n  while (this._input.hasNext()) {\n    current_char = this._input.peek();\n    if (!(esc || (current_char !== delimiter &&\n        (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {\n      break;\n    }\n\n    // Handle \\r\\n linebreaks after escapes or in template strings\n    if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {\n      if (current_char === '\\r' && this._input.peek(1) === '\\n') {\n        this._input.next();\n        current_char = this._input.peek();\n      }\n      resulting_string += '\\n';\n    } else {\n      resulting_string += current_char;\n    }\n\n    if (esc) {\n      if (current_char === 'x' || current_char === 'u') {\n        this.has_char_escapes = true;\n      }\n      esc = false;\n    } else {\n      esc = current_char === '\\\\';\n    }\n\n    this._input.next();\n\n    if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {\n      if (delimiter === '`') {\n        resulting_string += this._read_string_recursive('}', allow_unescaped_newlines, '`');\n      } else {\n        resulting_string += this._read_string_recursive('`', allow_unescaped_newlines, '${');\n      }\n\n      if (this._input.hasNext()) {\n        resulting_string += this._input.next();\n      }\n    }\n  }\n\n  return resulting_string;\n};\n\n\n\nmodule.exports.Tokenizer = Tokenizer;\nmodule.exports.TOKEN = TOKEN;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\n\nfunction Directives(start_block_pattern, end_block_pattern) {\n  start_block_pattern = typeof start_block_pattern === 'string' ? start_block_pattern : start_block_pattern.source;\n  end_block_pattern = typeof end_block_pattern === 'string' ? end_block_pattern : end_block_pattern.source;\n  this._directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, 'g');\n  this._directive_pattern = / (\\w+)[:](\\w+)/g;\n\n  this._directives_end_ignore_pattern = new RegExp('(?:[\\\\s\\\\S]*?)((?:' + start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern + ')|$)', 'g');\n}\n\nDirectives.prototype.get_directives = function(text) {\n  if (!text.match(this._directives_block_pattern)) {\n    return null;\n  }\n\n  var directives = {};\n  this._directive_pattern.lastIndex = 0;\n  var directive_match = this._directive_pattern.exec(text);\n\n  while (directive_match) {\n    directives[directive_match[1]] = directive_match[2];\n    directive_match = this._directive_pattern.exec(text);\n  }\n\n  return directives;\n};\n\nDirectives.prototype.readIgnored = function(input) {\n  return input.read(this._directives_end_ignore_pattern);\n};\n\n\nmodule.exports.Directives = Directives;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nvar BaseTokenizer = require('../core/tokenizer').Tokenizer;\nvar BASETOKEN = require('../core/tokenizer').TOKEN;\nvar Directives = require('../core/directives').Directives;\nvar acorn = require('../core/acorn');\n\nvar TOKEN = {\n  TAG_OPEN: 'TK_TAG_OPEN',\n  TAG_CLOSE: 'TK_TAG_CLOSE',\n  ATTRIBUTE: 'TK_ATTRIBUTE',\n  EQUALS: 'TK_EQUALS',\n  VALUE: 'TK_VALUE',\n  COMMENT: 'TK_COMMENT',\n  TEXT: 'TK_TEXT',\n  UNKNOWN: 'TK_UNKNOWN',\n  START: BASETOKEN.START,\n  RAW: BASETOKEN.RAW,\n  EOF: BASETOKEN.EOF\n};\n\nvar directives_core = new Directives(/<\\!--/, /-->/);\n\nvar Tokenizer = function(input_string, opts) {\n  BaseTokenizer.call(this, input_string);\n  this._opts = opts || {};\n  this._current_tag_name = '';\n\n  // Words end at whitespace or when a tag starts\n  // if we are indenting handlebars, they are considered tags\n  this._word_pattern = this._opts.indent_handlebars ? /[\\s<]|{{/g : /[\\s<]/g;\n};\nTokenizer.prototype = new BaseTokenizer();\n\nTokenizer.prototype.is_comment = function(current_token) { // jshint unused:false\n  return false; //current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.UNKNOWN;\n};\n\nTokenizer.prototype.is_opening = function(current_token) {\n  return current_token.type === TOKEN.TAG_OPEN;\n};\n\nTokenizer.prototype.is_closing = function(current_token, open_token) {\n  return current_token.type === TOKEN.TAG_CLOSE &&\n    (open_token && (\n      ((current_token.text === '>' || current_token.text === '/>') && open_token.text[0] === '<') ||\n      (current_token.text === '}}' && open_token.text[0] === '{' && open_token.text[1] === '{')));\n};\n\nTokenizer.prototype.reset = function() {\n  this._current_tag_name = '';\n};\n\nTokenizer.prototype.get_next_token = function(previous_token, open_token) { // jshint unused:false\n  this.readWhitespace();\n  var token = null;\n  var c = this._input.peek();\n\n  if (c === null) {\n    return this.create_token(TOKEN.EOF, '');\n  }\n\n  token = token || this._read_attribute(c, previous_token, open_token);\n  token = token || this._read_raw_content(previous_token, open_token);\n  token = token || this._read_comment(c);\n  token = token || this._read_open_close(c, open_token);\n  token = token || this._read_content_word();\n  token = token || this.create_token(TOKEN.UNKNOWN, this._input.next());\n\n  return token;\n};\n\n\nTokenizer.prototype._read_comment = function(c) { // jshint unused:false\n  var token = null;\n  if (c === '<' || c === '{') {\n    var peek1 = this._input.peek(1);\n    var peek2 = this._input.peek(2);\n    if ((c === '<' && (peek1 === '!' || peek1 === '?' || peek1 === '%')) ||\n      this._opts.indent_handlebars && c === '{' && peek1 === '{' && peek2 === '!') {\n      //if we're in a comment, do something special\n      // We treat all comments as literals, even more than preformatted tags\n      // we just look for the appropriate close tag\n\n      // this is will have very poor perf, but will work for now.\n      var comment = '',\n        delimiter = '>',\n        matched = false;\n\n      var input_char = this._input.next();\n\n      while (input_char) {\n        comment += input_char;\n\n        // only need to check for the delimiter if the last chars match\n        if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) &&\n          comment.indexOf(delimiter) !== -1) {\n          break;\n        }\n\n        // only need to search for custom delimiter for the first few characters\n        if (!matched) {\n          matched = comment.length > 10;\n          if (comment.indexOf('<![if') === 0) { //peek for <![if conditional comment\n            delimiter = '<![endif]>';\n            matched = true;\n          } else if (comment.indexOf('<![cdata[') === 0) { //if it's a <[cdata[ comment...\n            delimiter = ']]>';\n            matched = true;\n          } else if (comment.indexOf('<![') === 0) { // some other ![ comment? ...\n            delimiter = ']>';\n            matched = true;\n          } else if (comment.indexOf('<!--') === 0) { // <!-- comment ...\n            delimiter = '-->';\n            matched = true;\n          } else if (comment.indexOf('{{!--') === 0) { // {{!-- handlebars comment\n            delimiter = '--}}';\n            matched = true;\n          } else if (comment.indexOf('{{!') === 0) { // {{! handlebars comment\n            if (comment.length === 5 && comment.indexOf('{{!--') === -1) {\n              delimiter = '}}';\n              matched = true;\n            }\n          } else if (comment.indexOf('<?') === 0) { // {{! handlebars comment\n            delimiter = '?>';\n            matched = true;\n          } else if (comment.indexOf('<%') === 0) { // {{! handlebars comment\n            delimiter = '%>';\n            matched = true;\n          }\n        }\n\n        input_char = this._input.next();\n      }\n\n      var directives = directives_core.get_directives(comment);\n      if (directives && directives.ignore === 'start') {\n        comment += directives_core.readIgnored(this._input);\n      }\n      comment = comment.replace(acorn.allLineBreaks, '\\n');\n      token = this.create_token(TOKEN.COMMENT, comment);\n      token.directives = directives;\n    }\n  }\n\n  return token;\n};\n\nTokenizer.prototype._read_open_close = function(c, open_token) { // jshint unused:false\n  var resulting_string = null;\n  if (open_token && open_token.text[0] === '<' && (c === '>' || (c === '/' && this._input.peek(1) === '>'))) {\n    resulting_string = this._input.next();\n    if (this._input.peek() === '>') {\n      resulting_string += this._input.next();\n    }\n    return this.create_token(TOKEN.TAG_CLOSE, resulting_string);\n  } else if (open_token && open_token.text[0] === '{' && c === '}' && this._input.peek(1) === '}') {\n    this._input.next();\n    this._input.next();\n    return this.create_token(TOKEN.TAG_CLOSE, '}}');\n  } else if (!open_token) {\n    if (c === '<') {\n      resulting_string = this._input.next();\n      resulting_string += this._input.read(/[^\\s>{][^\\s>{/]*/g);\n      return this.create_token(TOKEN.TAG_OPEN, resulting_string);\n    } else if (this._opts.indent_handlebars && c === '{' && this._input.peek(1) === '{') {\n      this._input.next();\n      this._input.next();\n      resulting_string = '{{';\n      resulting_string += this._input.readUntil(/[\\s}]/g);\n      return this.create_token(TOKEN.TAG_OPEN, resulting_string);\n    }\n  }\n  return null;\n};\n\nTokenizer.prototype._read_attribute = function(c, previous_token, open_token) { // jshint unused:false\n  if (open_token && open_token.text[0] === '<') {\n    if (c === '=') {\n      return this.create_token(TOKEN.EQUALS, this._input.next());\n    } else if (c === '\"' || c === \"'\") {\n      var content = this._input.next();\n      var input_string = '';\n      var string_pattern = new RegExp(c + '|{{', 'g');\n      while (this._input.hasNext()) {\n        input_string = this._input.readUntilAfter(string_pattern);\n        content += input_string;\n        if (input_string[input_string.length - 1] === '\"' || input_string[input_string.length - 1] === \"'\") {\n          break;\n        } else if (this._input.hasNext()) {\n          content += this._input.readUntilAfter(/}}/g);\n        }\n      }\n\n      return this.create_token(TOKEN.VALUE, content);\n    }\n\n    var resulting_string = '';\n\n    if (c === '{' && this._input.peek(1) === '{') {\n      resulting_string = this._input.readUntilAfter(/}}/g);\n    } else {\n      resulting_string = this._input.readUntil(/[\\s=\\/>]/g);\n    }\n\n    if (resulting_string) {\n      if (previous_token.type === TOKEN.EQUALS) {\n        return this.create_token(TOKEN.VALUE, resulting_string);\n      } else {\n        return this.create_token(TOKEN.ATTRIBUTE, resulting_string);\n      }\n    }\n  }\n  return null;\n};\n\nTokenizer.prototype._read_raw_content = function(previous_token, open_token) { // jshint unused:false\n  var resulting_string = '';\n  if (open_token && open_token.text[0] === '{') {\n    resulting_string = this._input.readUntil(/}}/g);\n    if (resulting_string) {\n      return this.create_token(TOKEN.TEXT, resulting_string);\n    }\n  } else if (previous_token.type === TOKEN.TAG_CLOSE && (previous_token.opened.text[0] === '<')) {\n    var tag_name = previous_token.opened.text.substr(1).toLowerCase();\n    if (tag_name === 'script' || tag_name === 'style' ||\n      this._opts.content_unformatted.indexOf(tag_name) !== -1 ||\n      this._opts.unformatted.indexOf(tag_name) !== -1) {\n      return this.create_token(TOKEN.TEXT, this._input.readUntil(new RegExp('</' + tag_name + '\\\\s*?>', 'ig')));\n    }\n  }\n  return null;\n};\n\nTokenizer.prototype._read_content_word = function() {\n  // if we get here and we see handlebars treat them as a\n  var resulting_string = this._input.readUntil(this._word_pattern);\n  if (resulting_string) {\n    return this.create_token(TOKEN.TEXT, resulting_string);\n  }\n};\n\nmodule.exports.Tokenizer = Tokenizer;\nmodule.exports.TOKEN = TOKEN;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nvar js_beautify = require('./javascript/index');\nvar css_beautify = require('./css/index');\nvar html_beautify = require('./html/index');\n\nfunction style_html(html_source, options, js, css) {\n  js = js || js_beautify;\n  css = css || css_beautify;\n  return html_beautify(html_source, options, js, css);\n}\n\nmodule.exports.js = js_beautify;\nmodule.exports.css = css_beautify;\nmodule.exports.html = style_html;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar Beautifier = require('./beautifier').Beautifier;\n\nfunction js_beautify(js_source_text, options) {\n  var beautifier = new Beautifier(js_source_text, options);\n  return beautifier.beautify();\n}\n\nmodule.exports = js_beautify;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar mergeOpts = require('../core/options').mergeOpts;\nvar acorn = require('../core/acorn');\nvar Output = require('../core/output').Output;\nvar Tokenizer = require('./tokenizer').Tokenizer;\nvar TOKEN = require('./tokenizer').TOKEN;\n\nfunction remove_redundant_indentation(output, frame) {\n  // This implementation is effective but has some issues:\n  //     - can cause line wrap to happen too soon due to indent removal\n  //           after wrap points are calculated\n  // These issues are minor compared to ugly indentation.\n\n  if (frame.multiline_frame ||\n    frame.mode === MODE.ForInitializer ||\n    frame.mode === MODE.Conditional) {\n    return;\n  }\n\n  // remove one indent from each line inside this section\n  var start_index = frame.start_line_index;\n\n  output.remove_indent(start_index);\n}\n\nfunction in_array(what, arr) {\n  return arr.indexOf(what) !== -1;\n}\n\nfunction ltrim(s) {\n  return s.replace(/^\\s+/g, '');\n}\n\nfunction generateMapFromStrings(list) {\n  var result = {};\n  for (var x = 0; x < list.length; x++) {\n    // make the mapped names underscored instead of dash\n    result[list[x].replace(/-/g, '_')] = list[x];\n  }\n  return result;\n}\n\nfunction sanitizeOperatorPosition(opPosition) {\n  opPosition = opPosition || OPERATOR_POSITION.before_newline;\n\n  if (!in_array(opPosition, validPositionValues)) {\n    throw new Error(\"Invalid Option Value: The option 'operator_position' must be one of the following values\\n\" +\n      validPositionValues +\n      \"\\nYou passed in: '\" + opPosition + \"'\");\n  }\n\n  return opPosition;\n}\n\nvar validPositionValues = ['before-newline', 'after-newline', 'preserve-newline'];\n\n// Generate map from array\nvar OPERATOR_POSITION = generateMapFromStrings(validPositionValues);\n\nvar OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];\n\nvar MODE = {\n  BlockStatement: 'BlockStatement', // 'BLOCK'\n  Statement: 'Statement', // 'STATEMENT'\n  ObjectLiteral: 'ObjectLiteral', // 'OBJECT',\n  ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',\n  ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',\n  Conditional: 'Conditional', //'(COND-EXPRESSION)',\n  Expression: 'Expression' //'(EXPRESSION)'\n};\n\nfunction Beautifier(js_source_text, options) {\n  \"use strict\";\n  options = options || {};\n  js_source_text = js_source_text || '';\n\n  var output;\n  var tokens;\n  var tokenizer;\n  var current_token;\n  var last_type, last_last_text, indent_string;\n  var flags, previous_flags, flag_store;\n  var prefix;\n\n  var handlers, opt;\n  var baseIndentString = '';\n\n  handlers = {};\n  handlers[TOKEN.START_EXPR] = handle_start_expr;\n  handlers[TOKEN.END_EXPR] = handle_end_expr;\n  handlers[TOKEN.START_BLOCK] = handle_start_block;\n  handlers[TOKEN.END_BLOCK] = handle_end_block;\n  handlers[TOKEN.WORD] = handle_word;\n  handlers[TOKEN.RESERVED] = handle_word;\n  handlers[TOKEN.SEMICOLON] = handle_semicolon;\n  handlers[TOKEN.STRING] = handle_string;\n  handlers[TOKEN.EQUALS] = handle_equals;\n  handlers[TOKEN.OPERATOR] = handle_operator;\n  handlers[TOKEN.COMMA] = handle_comma;\n  handlers[TOKEN.BLOCK_COMMENT] = handle_block_comment;\n  handlers[TOKEN.COMMENT] = handle_comment;\n  handlers[TOKEN.DOT] = handle_dot;\n  handlers[TOKEN.UNKNOWN] = handle_unknown;\n  handlers[TOKEN.EOF] = handle_eof;\n\n  function create_flags(flags_base, mode) {\n    var next_indent_level = 0;\n    if (flags_base) {\n      next_indent_level = flags_base.indentation_level;\n      if (!output.just_added_newline() &&\n        flags_base.line_indent_level > next_indent_level) {\n        next_indent_level = flags_base.line_indent_level;\n      }\n    }\n\n    var next_flags = {\n      mode: mode,\n      parent: flags_base,\n      last_text: flags_base ? flags_base.last_text : '', // last token text\n      last_word: flags_base ? flags_base.last_word : '', // last TOKEN.WORD passed\n      declaration_statement: false,\n      declaration_assignment: false,\n      multiline_frame: false,\n      inline_frame: false,\n      if_block: false,\n      else_block: false,\n      do_block: false,\n      do_while: false,\n      import_block: false,\n      in_case_statement: false, // switch(..){ INSIDE HERE }\n      in_case: false, // we're on the exact line with \"case 0:\"\n      case_body: false, // the indented case-action block\n      indentation_level: next_indent_level,\n      line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n      start_line_index: output.get_line_number(),\n      ternary_depth: 0\n    };\n    return next_flags;\n  }\n\n  // Allow the setting of language/file-type specific options\n  // with inheritance of overall settings\n  options = mergeOpts(options, 'js');\n\n  opt = {};\n\n  // compatibility, re\n  if (options.brace_style === \"expand-strict\") { //graceful handling of deprecated option\n    options.brace_style = \"expand\";\n  } else if (options.brace_style === \"collapse-preserve-inline\") { //graceful handling of deprecated option\n    options.brace_style = \"collapse,preserve-inline\";\n  } else if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option\n    options.brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";\n  } else if (!options.brace_style) { //Nothing exists to set it\n    options.brace_style = \"collapse\";\n  }\n\n  //preserve-inline in delimited string will trigger brace_preserve_inline, everything\n  //else is considered a brace_style and the last one only will have an effect\n  var brace_style_split = options.brace_style.split(/[^a-zA-Z0-9_\\-]+/);\n  opt.brace_preserve_inline = false; //Defaults in case one or other was not specified in meta-option\n  opt.brace_style = \"collapse\";\n  for (var bs = 0; bs < brace_style_split.length; bs++) {\n    if (brace_style_split[bs] === \"preserve-inline\") {\n      opt.brace_preserve_inline = true;\n    } else {\n      opt.brace_style = brace_style_split[bs];\n    }\n  }\n\n  opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n  opt.indent_char = options.indent_char ? options.indent_char : ' ';\n  opt.eol = options.eol ? options.eol : 'auto';\n  opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n  opt.unindent_chained_methods = (options.unindent_chained_methods === undefined) ? false : options.unindent_chained_methods;\n  opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;\n  opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);\n  opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;\n  opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;\n  opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;\n  opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;\n  opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;\n  opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;\n  opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;\n  opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);\n  opt.e4x = (options.e4x === undefined) ? false : options.e4x;\n  opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n  opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;\n  opt.operator_position = sanitizeOperatorPosition(options.operator_position);\n\n  // For testing of beautify ignore:start directive\n  opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;\n\n  // force opt.space_after_anon_function to true if opt.jslint_happy\n  if (opt.jslint_happy) {\n    opt.space_after_anon_function = true;\n  }\n\n  if (options.indent_with_tabs) {\n    opt.indent_char = '\\t';\n    opt.indent_size = 1;\n  }\n\n  if (opt.eol === 'auto') {\n    opt.eol = '\\n';\n    if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {\n      opt.eol = js_source_text.match(acorn.lineBreak)[0];\n    }\n  }\n\n  opt.eol = opt.eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n  //----------------------------------\n  indent_string = '';\n  while (opt.indent_size > 0) {\n    indent_string += opt.indent_char;\n    opt.indent_size -= 1;\n  }\n\n  var preindent_index = 0;\n  if (js_source_text && js_source_text.length) {\n    while ((js_source_text.charAt(preindent_index) === ' ' ||\n        js_source_text.charAt(preindent_index) === '\\t')) {\n      preindent_index += 1;\n    }\n    baseIndentString = js_source_text.substring(0, preindent_index);\n    js_source_text = js_source_text.substring(preindent_index);\n  }\n\n  last_type = TOKEN.START_BLOCK; // last token type\n  last_last_text = ''; // pre-last token text\n  output = new Output(indent_string, baseIndentString);\n\n  // If testing the ignore directive, start with output disable set to true\n  output.raw = opt.test_output_raw;\n\n\n  // Stack of parsing/formatting states, including MODE.\n  // We tokenize, parse, and output in an almost purely a forward-only stream of token input\n  // and formatted output.  This makes the beautifier less accurate than full parsers\n  // but also far more tolerant of syntax errors.\n  //\n  // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type\n  // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later\n  // encounter a \":\", we'll switch to to MODE.ObjectLiteral.  If we then see a \";\",\n  // most full parsers would die, but the beautifier gracefully falls back to\n  // MODE.BlockStatement and continues on.\n  flag_store = [];\n  set_mode(MODE.BlockStatement);\n\n  this.beautify = function() {\n\n    /*jshint onevar:true */\n    var sweet_code;\n    tokenizer = new Tokenizer(js_source_text, opt, indent_string);\n    tokens = tokenizer.tokenize();\n\n    current_token = tokens.next();\n    while (current_token) {\n      handlers[current_token.type]();\n\n      last_last_text = flags.last_text;\n      last_type = current_token.type;\n      flags.last_text = current_token.text;\n\n      current_token = tokens.next();\n    }\n\n    sweet_code = output.get_code(opt.end_with_newline, opt.eol);\n\n    return sweet_code;\n  };\n\n  function handle_whitespace_and_comments(local_token, preserve_statement_flags) {\n    var newlines = local_token.newlines;\n    var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);\n\n    if (local_token.comments_before) {\n      var temp_token = current_token;\n      current_token = local_token.comments_before.next();\n      while (current_token) {\n        // The cleanest handling of inline comments is to treat them as though they aren't there.\n        // Just continue formatting and the behavior should be logical.\n        // Also ignore unknown tokens.  Again, this should result in better behavior.\n        handle_whitespace_and_comments(current_token, preserve_statement_flags);\n        handlers[current_token.type](preserve_statement_flags);\n        current_token = local_token.comments_before.next();\n      }\n      current_token = temp_token;\n    }\n\n    if (keep_whitespace) {\n      for (var i = 0; i < newlines; i += 1) {\n        print_newline(i > 0, preserve_statement_flags);\n      }\n    } else {\n      if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {\n        newlines = opt.max_preserve_newlines;\n      }\n\n      if (opt.preserve_newlines) {\n        if (local_token.newlines > 1) {\n          print_newline(false, preserve_statement_flags);\n          for (var j = 1; j < newlines; j += 1) {\n            print_newline(true, preserve_statement_flags);\n          }\n        }\n      }\n    }\n\n  }\n\n  // we could use just string.split, but\n  // IE doesn't like returning empty strings\n  function split_linebreaks(s) {\n    //return s.split(/\\x0d\\x0a|\\x0a/);\n\n    s = s.replace(acorn.allLineBreaks, '\\n');\n    var out = [],\n      idx = s.indexOf(\"\\n\");\n    while (idx !== -1) {\n      out.push(s.substring(0, idx));\n      s = s.substring(idx + 1);\n      idx = s.indexOf(\"\\n\");\n    }\n    if (s.length) {\n      out.push(s);\n    }\n    return out;\n  }\n\n  var newline_restricted_tokens = ['async', 'await', 'break', 'continue', 'return', 'throw', 'yield'];\n\n  function allow_wrap_or_preserved_newline(force_linewrap) {\n    force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;\n\n    // Never wrap the first token on a line\n    if (output.just_added_newline()) {\n      return;\n    }\n\n    var shouldPreserveOrForce = (opt.preserve_newlines && current_token.newlines) || force_linewrap;\n    var operatorLogicApplies = in_array(flags.last_text, tokenizer.positionable_operators) || in_array(current_token.text, tokenizer.positionable_operators);\n\n    if (operatorLogicApplies) {\n      var shouldPrintOperatorNewline = (\n          in_array(flags.last_text, tokenizer.positionable_operators) &&\n          in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)\n        ) ||\n        in_array(current_token.text, tokenizer.positionable_operators);\n      shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;\n    }\n\n    if (shouldPreserveOrForce) {\n      print_newline(false, true);\n    } else if (opt.wrap_line_length) {\n      if (last_type === TOKEN.RESERVED && in_array(flags.last_text, newline_restricted_tokens)) {\n        // These tokens should never have a newline inserted\n        // between them and the following expression.\n        return;\n      }\n      var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +\n        (output.space_before_token ? 1 : 0);\n      if (proposed_line_length >= opt.wrap_line_length) {\n        print_newline(false, true);\n      }\n    }\n  }\n\n  function print_newline(force_newline, preserve_statement_flags) {\n    if (!preserve_statement_flags) {\n      if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && (last_type !== TOKEN.OPERATOR || flags.last_text === '--' || flags.last_text === '++')) {\n        var next_token = tokens.peek();\n        while (flags.mode === MODE.Statement &&\n          !(flags.if_block && next_token && next_token.type === TOKEN.RESERVED && next_token.text === 'else') &&\n          !flags.do_block) {\n          restore_mode();\n        }\n      }\n    }\n\n    if (output.add_new_line(force_newline)) {\n      flags.multiline_frame = true;\n    }\n  }\n\n  function print_token_line_indentation() {\n    if (output.just_added_newline()) {\n      if (opt.keep_array_indentation && is_array(flags.mode) && current_token.newlines) {\n        output.current_line.push(current_token.whitespace_before);\n        output.space_before_token = false;\n      } else if (output.set_indent(flags.indentation_level)) {\n        flags.line_indent_level = flags.indentation_level;\n      }\n    }\n  }\n\n  function print_token(printable_token) {\n    if (output.raw) {\n      output.add_raw_token(current_token);\n      return;\n    }\n\n    if (opt.comma_first && last_type === TOKEN.COMMA &&\n      output.just_added_newline()) {\n      if (output.previous_line.last() === ',') {\n        var popped = output.previous_line.pop();\n        // if the comma was already at the start of the line,\n        // pull back onto that line and reprint the indentation\n        if (output.previous_line.is_empty()) {\n          output.previous_line.push(popped);\n          output.trim(true);\n          output.current_line.pop();\n          output.trim();\n        }\n\n        // add the comma in front of the next token\n        print_token_line_indentation();\n        output.add_token(',');\n        output.space_before_token = true;\n      }\n    }\n\n    printable_token = printable_token || current_token.text;\n    print_token_line_indentation();\n    output.add_token(printable_token);\n  }\n\n  function indent() {\n    flags.indentation_level += 1;\n  }\n\n  function deindent() {\n    if (flags.indentation_level > 0 &&\n      ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level)) {\n      flags.indentation_level -= 1;\n\n    }\n  }\n\n  function set_mode(mode) {\n    if (flags) {\n      flag_store.push(flags);\n      previous_flags = flags;\n    } else {\n      previous_flags = create_flags(null, mode);\n    }\n\n    flags = create_flags(previous_flags, mode);\n  }\n\n  function is_array(mode) {\n    return mode === MODE.ArrayLiteral;\n  }\n\n  function is_expression(mode) {\n    return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);\n  }\n\n  function restore_mode() {\n    if (flag_store.length > 0) {\n      previous_flags = flags;\n      flags = flag_store.pop();\n      if (previous_flags.mode === MODE.Statement) {\n        remove_redundant_indentation(output, previous_flags);\n      }\n    }\n  }\n\n  function start_of_object_property() {\n    return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (\n      (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === TOKEN.RESERVED && in_array(flags.last_text, ['get', 'set'])));\n  }\n\n  function start_of_statement() {\n    var start = false;\n    start = start || (last_type === TOKEN.RESERVED && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === TOKEN.WORD);\n    start = start || (last_type === TOKEN.RESERVED && flags.last_text === 'do');\n    start = start || (last_type === TOKEN.RESERVED && in_array(flags.last_text, newline_restricted_tokens) && !current_token.newlines);\n    start = start || (last_type === TOKEN.RESERVED && flags.last_text === 'else' &&\n      !(current_token.type === TOKEN.RESERVED && current_token.text === 'if' && !current_token.comments_before));\n    start = start || (last_type === TOKEN.END_EXPR && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional));\n    start = start || (last_type === TOKEN.WORD && flags.mode === MODE.BlockStatement &&\n      !flags.in_case &&\n      !(current_token.text === '--' || current_token.text === '++') &&\n      last_last_text !== 'function' &&\n      current_token.type !== TOKEN.WORD && current_token.type !== TOKEN.RESERVED);\n    start = start || (flags.mode === MODE.ObjectLiteral && (\n      (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === TOKEN.RESERVED && in_array(flags.last_text, ['get', 'set']))));\n\n    if (start) {\n      set_mode(MODE.Statement);\n      indent();\n\n      handle_whitespace_and_comments(current_token, true);\n\n      // Issue #276:\n      // If starting a new statement with [if, for, while, do], push to a new line.\n      // if (a) if (b) if(c) d(); else e(); else f();\n      if (!start_of_object_property()) {\n        allow_wrap_or_preserved_newline(\n          current_token.type === TOKEN.RESERVED && in_array(current_token.text, ['do', 'for', 'if', 'while']));\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  function all_lines_start_with(lines, c) {\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i].trim();\n      if (line.charAt(0) !== c) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function each_line_matches_indent(lines, indent) {\n    var i = 0,\n      len = lines.length,\n      line;\n    for (; i < len; i++) {\n      line = lines[i];\n      // allow empty lines to pass through\n      if (line && line.indexOf(indent) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function is_special_word(word) {\n    return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else', 'await', 'break', 'continue', 'async']);\n  }\n\n  function handle_start_expr() {\n    // The conditional starts the statement if appropriate.\n    if (!start_of_statement()) {\n      handle_whitespace_and_comments(current_token);\n    }\n\n    var next_mode = MODE.Expression;\n    if (current_token.text === '[') {\n\n      if (last_type === TOKEN.WORD || flags.last_text === ')') {\n        // this is array index specifier, break immediately\n        // a[x], fn()[x]\n        if (last_type === TOKEN.RESERVED && in_array(flags.last_text, tokenizer.line_starters)) {\n          output.space_before_token = true;\n        }\n        set_mode(next_mode);\n        print_token();\n        indent();\n        if (opt.space_in_paren) {\n          output.space_before_token = true;\n        }\n        return;\n      }\n\n      next_mode = MODE.ArrayLiteral;\n      if (is_array(flags.mode)) {\n        if (flags.last_text === '[' ||\n          (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {\n          // ], [ goes to new line\n          // }, [ goes to new line\n          if (!opt.keep_array_indentation) {\n            print_newline();\n          }\n        }\n      }\n\n      if (!in_array(last_type, [TOKEN.START_EXPR, TOKEN.END_EXPR, TOKEN.WORD, TOKEN.OPERATOR])) {\n        output.space_before_token = true;\n      }\n    } else {\n      if (last_type === TOKEN.RESERVED) {\n        if (flags.last_text === 'for') {\n          output.space_before_token = opt.space_before_conditional;\n          next_mode = MODE.ForInitializer;\n        } else if (in_array(flags.last_text, ['if', 'while'])) {\n          output.space_before_token = opt.space_before_conditional;\n          next_mode = MODE.Conditional;\n        } else if (in_array(flags.last_word, ['await', 'async'])) {\n          // Should be a space between await and an IIFE, or async and an arrow function\n          output.space_before_token = true;\n        } else if (flags.last_text === 'import' && current_token.whitespace_before === '') {\n          output.space_before_token = false;\n        } else if (in_array(flags.last_text, tokenizer.line_starters) || flags.last_text === 'catch') {\n          output.space_before_token = true;\n        }\n      } else if (last_type === TOKEN.EQUALS || last_type === TOKEN.OPERATOR) {\n        // Support of this kind of newline preservation.\n        // a = (b &&\n        //     (c || d));\n        if (!start_of_object_property()) {\n          allow_wrap_or_preserved_newline();\n        }\n      } else if (last_type === TOKEN.WORD) {\n        output.space_before_token = false;\n      } else {\n        // Support preserving wrapped arrow function expressions\n        // a.b('c',\n        //     () => d.e\n        // )\n        allow_wrap_or_preserved_newline();\n      }\n\n      // function() vs function ()\n      // yield*() vs yield* ()\n      // function*() vs function* ()\n      if ((last_type === TOKEN.RESERVED && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||\n        (flags.last_text === '*' &&\n          (in_array(last_last_text, ['function', 'yield']) ||\n            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {\n\n        output.space_before_token = opt.space_after_anon_function;\n      }\n\n    }\n\n    if (flags.last_text === ';' || last_type === TOKEN.START_BLOCK) {\n      print_newline();\n    } else if (last_type === TOKEN.END_EXPR || last_type === TOKEN.START_EXPR || last_type === TOKEN.END_BLOCK || flags.last_text === '.' || last_type === TOKEN.COMMA) {\n      // do nothing on (( and )( and ][ and ]( and .(\n      // TODO: Consider whether forcing this is required.  Review failing tests when removed.\n      allow_wrap_or_preserved_newline(current_token.newlines);\n    }\n\n    set_mode(next_mode);\n    print_token();\n    if (opt.space_in_paren) {\n      output.space_before_token = true;\n    }\n\n    // In all cases, if we newline while inside an expression it should be indented.\n    indent();\n  }\n\n  function handle_end_expr() {\n    // statements inside expressions are not valid syntax, but...\n    // statements must all be closed when their container closes\n    while (flags.mode === MODE.Statement) {\n      restore_mode();\n    }\n\n    handle_whitespace_and_comments(current_token);\n\n    if (flags.multiline_frame) {\n      allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);\n    }\n\n    if (opt.space_in_paren) {\n      if (last_type === TOKEN.START_EXPR && !opt.space_in_empty_paren) {\n        // () [] no inner space in empty parens like these, ever, ref #320\n        output.trim();\n        output.space_before_token = false;\n      } else {\n        output.space_before_token = true;\n      }\n    }\n    if (current_token.text === ']' && opt.keep_array_indentation) {\n      print_token();\n      restore_mode();\n    } else {\n      restore_mode();\n      print_token();\n    }\n    remove_redundant_indentation(output, previous_flags);\n\n    // do {} while () // no statement required after\n    if (flags.do_while && previous_flags.mode === MODE.Conditional) {\n      previous_flags.mode = MODE.Expression;\n      flags.do_block = false;\n      flags.do_while = false;\n\n    }\n  }\n\n  function handle_start_block() {\n    handle_whitespace_and_comments(current_token);\n\n    // Check if this is should be treated as a ObjectLiteral\n    var next_token = tokens.peek();\n    var second_token = tokens.peek(1);\n    if (second_token && (\n        (in_array(second_token.text, [':', ',']) && in_array(next_token.type, [TOKEN.STRING, TOKEN.WORD, TOKEN.RESERVED])) ||\n        (in_array(next_token.text, ['get', 'set', '...']) && in_array(second_token.type, [TOKEN.WORD, TOKEN.RESERVED]))\n      )) {\n      // We don't support TypeScript,but we didn't break it for a very long time.\n      // We'll try to keep not breaking it.\n      if (!in_array(last_last_text, ['class', 'interface'])) {\n        set_mode(MODE.ObjectLiteral);\n      } else {\n        set_mode(MODE.BlockStatement);\n      }\n    } else if (last_type === TOKEN.OPERATOR && flags.last_text === '=>') {\n      // arrow function: (param1, paramN) => { statements }\n      set_mode(MODE.BlockStatement);\n    } else if (in_array(last_type, [TOKEN.EQUALS, TOKEN.START_EXPR, TOKEN.COMMA, TOKEN.OPERATOR]) ||\n      (last_type === TOKEN.RESERVED && in_array(flags.last_text, ['return', 'throw', 'import', 'default']))\n    ) {\n      // Detecting shorthand function syntax is difficult by scanning forward,\n      //     so check the surrounding context.\n      // If the block is being returned, imported, export default, passed as arg,\n      //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.\n      set_mode(MODE.ObjectLiteral);\n    } else {\n      set_mode(MODE.BlockStatement);\n    }\n\n    var empty_braces = !next_token.comments_before && next_token.text === '}';\n    var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&\n      last_type === TOKEN.END_EXPR;\n\n    if (opt.brace_preserve_inline) // check for inline, set inline_frame if so\n    {\n      // search forward for a newline wanted inside this block\n      var index = 0;\n      var check_token = null;\n      flags.inline_frame = true;\n      do {\n        index += 1;\n        check_token = tokens.peek(index - 1);\n        if (check_token.newlines) {\n          flags.inline_frame = false;\n          break;\n        }\n      } while (check_token.type !== TOKEN.EOF &&\n        !(check_token.type === TOKEN.END_BLOCK && check_token.opened === current_token));\n    }\n\n    if ((opt.brace_style === \"expand\" ||\n        (opt.brace_style === \"none\" && current_token.newlines)) &&\n      !flags.inline_frame) {\n      if (last_type !== TOKEN.OPERATOR &&\n        (empty_anonymous_function ||\n          last_type === TOKEN.EQUALS ||\n          (last_type === TOKEN.RESERVED && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {\n        output.space_before_token = true;\n      } else {\n        print_newline(false, true);\n      }\n    } else { // collapse || inline_frame\n      if (is_array(previous_flags.mode) && (last_type === TOKEN.START_EXPR || last_type === TOKEN.COMMA)) {\n        if (last_type === TOKEN.COMMA || opt.space_in_paren) {\n          output.space_before_token = true;\n        }\n\n        if (last_type === TOKEN.COMMA || (last_type === TOKEN.START_EXPR && flags.inline_frame)) {\n          allow_wrap_or_preserved_newline();\n          previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;\n          flags.multiline_frame = false;\n        }\n      }\n      if (last_type !== TOKEN.OPERATOR && last_type !== TOKEN.START_EXPR) {\n        if (last_type === TOKEN.START_BLOCK && !flags.inline_frame) {\n          print_newline();\n        } else {\n          output.space_before_token = true;\n        }\n      }\n    }\n    print_token();\n    indent();\n  }\n\n  function handle_end_block() {\n    // statements must all be closed when their container closes\n    handle_whitespace_and_comments(current_token);\n\n    while (flags.mode === MODE.Statement) {\n      restore_mode();\n    }\n\n    var empty_braces = last_type === TOKEN.START_BLOCK;\n\n    if (flags.inline_frame && !empty_braces) { // try inline_frame (only set if opt.braces-preserve-inline) first\n      output.space_before_token = true;\n    } else if (opt.brace_style === \"expand\") {\n      if (!empty_braces) {\n        print_newline();\n      }\n    } else {\n      // skip {}\n      if (!empty_braces) {\n        if (is_array(flags.mode) && opt.keep_array_indentation) {\n          // we REALLY need a newline here, but newliner would skip that\n          opt.keep_array_indentation = false;\n          print_newline();\n          opt.keep_array_indentation = true;\n\n        } else {\n          print_newline();\n        }\n      }\n    }\n    restore_mode();\n    print_token();\n  }\n\n  function handle_word() {\n    if (current_token.type === TOKEN.RESERVED) {\n      if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {\n        current_token.type = TOKEN.WORD;\n      } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {\n        current_token.type = TOKEN.WORD;\n      } else if (flags.mode === MODE.ObjectLiteral) {\n        var next_token = tokens.peek();\n        if (next_token.text === ':') {\n          current_token.type = TOKEN.WORD;\n        }\n      }\n    }\n\n    if (start_of_statement()) {\n      // The conditional starts the statement if appropriate.\n      if (last_type === TOKEN.RESERVED && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === TOKEN.WORD) {\n        flags.declaration_statement = true;\n      }\n    } else if (current_token.newlines && !is_expression(flags.mode) &&\n      (last_type !== TOKEN.OPERATOR || (flags.last_text === '--' || flags.last_text === '++')) &&\n      last_type !== TOKEN.EQUALS &&\n      (opt.preserve_newlines || !(last_type === TOKEN.RESERVED && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {\n      handle_whitespace_and_comments(current_token);\n      print_newline();\n    } else {\n      handle_whitespace_and_comments(current_token);\n    }\n\n    if (flags.do_block && !flags.do_while) {\n      if (current_token.type === TOKEN.RESERVED && current_token.text === 'while') {\n        // do {} ## while ()\n        output.space_before_token = true;\n        print_token();\n        output.space_before_token = true;\n        flags.do_while = true;\n        return;\n      } else {\n        // do {} should always have while as the next word.\n        // if we don't see the expected while, recover\n        print_newline();\n        flags.do_block = false;\n      }\n    }\n\n    // if may be followed by else, or not\n    // Bare/inline ifs are tricky\n    // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();\n    if (flags.if_block) {\n      if (!flags.else_block && (current_token.type === TOKEN.RESERVED && current_token.text === 'else')) {\n        flags.else_block = true;\n      } else {\n        while (flags.mode === MODE.Statement) {\n          restore_mode();\n        }\n        flags.if_block = false;\n        flags.else_block = false;\n      }\n    }\n\n    if (current_token.type === TOKEN.RESERVED && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {\n      print_newline();\n      if (flags.case_body || opt.jslint_happy) {\n        // switch cases following one another\n        deindent();\n        flags.case_body = false;\n      }\n      print_token();\n      flags.in_case = true;\n      flags.in_case_statement = true;\n      return;\n    }\n\n    if (last_type === TOKEN.COMMA || last_type === TOKEN.START_EXPR || last_type === TOKEN.EQUALS || last_type === TOKEN.OPERATOR) {\n      if (!start_of_object_property()) {\n        allow_wrap_or_preserved_newline();\n      }\n    }\n\n    if (current_token.type === TOKEN.RESERVED && current_token.text === 'function') {\n      if (in_array(flags.last_text, ['}', ';']) ||\n        (output.just_added_newline() && !(in_array(flags.last_text, ['(', '[', '{', ':', '=', ',']) || last_type === TOKEN.OPERATOR))) {\n        // make sure there is a nice clean space of at least one blank line\n        // before a new function definition\n        if (!output.just_added_blankline() && !current_token.comments_before) {\n          print_newline();\n          print_newline(true);\n        }\n      }\n      if (last_type === TOKEN.RESERVED || last_type === TOKEN.WORD) {\n        if (last_type === TOKEN.RESERVED && (\n            in_array(flags.last_text, ['get', 'set', 'new', 'export']) ||\n            in_array(flags.last_text, newline_restricted_tokens))) {\n          output.space_before_token = true;\n        } else if (last_type === TOKEN.RESERVED && flags.last_text === 'default' && last_last_text === 'export') {\n          output.space_before_token = true;\n        } else {\n          print_newline();\n        }\n      } else if (last_type === TOKEN.OPERATOR || flags.last_text === '=') {\n        // foo = function\n        output.space_before_token = true;\n      } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {\n        // (function\n      } else {\n        print_newline();\n      }\n\n      print_token();\n      flags.last_word = current_token.text;\n      return;\n    }\n\n    prefix = 'NONE';\n\n    if (last_type === TOKEN.END_BLOCK) {\n\n      if (previous_flags.inline_frame) {\n        prefix = 'SPACE';\n      } else if (!(current_token.type === TOKEN.RESERVED && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {\n        prefix = 'NEWLINE';\n      } else {\n        if (opt.brace_style === \"expand\" ||\n          opt.brace_style === \"end-expand\" ||\n          (opt.brace_style === \"none\" && current_token.newlines)) {\n          prefix = 'NEWLINE';\n        } else {\n          prefix = 'SPACE';\n          output.space_before_token = true;\n        }\n      }\n    } else if (last_type === TOKEN.SEMICOLON && flags.mode === MODE.BlockStatement) {\n      // TODO: Should this be for STATEMENT as well?\n      prefix = 'NEWLINE';\n    } else if (last_type === TOKEN.SEMICOLON && is_expression(flags.mode)) {\n      prefix = 'SPACE';\n    } else if (last_type === TOKEN.STRING) {\n      prefix = 'NEWLINE';\n    } else if (last_type === TOKEN.RESERVED || last_type === TOKEN.WORD ||\n      (flags.last_text === '*' &&\n        (in_array(last_last_text, ['function', 'yield']) ||\n          (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {\n      prefix = 'SPACE';\n    } else if (last_type === TOKEN.START_BLOCK) {\n      if (flags.inline_frame) {\n        prefix = 'SPACE';\n      } else {\n        prefix = 'NEWLINE';\n      }\n    } else if (last_type === TOKEN.END_EXPR) {\n      output.space_before_token = true;\n      prefix = 'NEWLINE';\n    }\n\n    if (current_token.type === TOKEN.RESERVED && in_array(current_token.text, tokenizer.line_starters) && flags.last_text !== ')') {\n      if (flags.inline_frame || flags.last_text === 'else' || flags.last_text === 'export') {\n        prefix = 'SPACE';\n      } else {\n        prefix = 'NEWLINE';\n      }\n\n    }\n\n    if (current_token.type === TOKEN.RESERVED && in_array(current_token.text, ['else', 'catch', 'finally'])) {\n      if ((!(last_type === TOKEN.END_BLOCK && previous_flags.mode === MODE.BlockStatement) ||\n          opt.brace_style === \"expand\" ||\n          opt.brace_style === \"end-expand\" ||\n          (opt.brace_style === \"none\" && current_token.newlines)) &&\n        !flags.inline_frame) {\n        print_newline();\n      } else {\n        output.trim(true);\n        var line = output.current_line;\n        // If we trimmed and there's something other than a close block before us\n        // put a newline back in.  Handles '} // comment' scenario.\n        if (line.last() !== '}') {\n          print_newline();\n        }\n        output.space_before_token = true;\n      }\n    } else if (prefix === 'NEWLINE') {\n      if (last_type === TOKEN.RESERVED && is_special_word(flags.last_text)) {\n        // no newline between 'return nnn'\n        output.space_before_token = true;\n      } else if (last_type !== TOKEN.END_EXPR) {\n        if ((last_type !== TOKEN.START_EXPR || !(current_token.type === TOKEN.RESERVED && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {\n          // no need to force newline on 'var': for (var x = 0...)\n          if (current_token.type === TOKEN.RESERVED && current_token.text === 'if' && flags.last_text === 'else') {\n            // no newline for } else if {\n            output.space_before_token = true;\n          } else {\n            print_newline();\n          }\n        }\n      } else if (current_token.type === TOKEN.RESERVED && in_array(current_token.text, tokenizer.line_starters) && flags.last_text !== ')') {\n        print_newline();\n      }\n    } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {\n      print_newline(); // }, in lists get a newline treatment\n    } else if (prefix === 'SPACE') {\n      output.space_before_token = true;\n    }\n    if (last_type === TOKEN.WORD || last_type === TOKEN.RESERVED) {\n      output.space_before_token = true;\n    }\n    print_token();\n    flags.last_word = current_token.text;\n\n    if (current_token.type === TOKEN.RESERVED) {\n      if (current_token.text === 'do') {\n        flags.do_block = true;\n      } else if (current_token.text === 'if') {\n        flags.if_block = true;\n      } else if (current_token.text === 'import') {\n        flags.import_block = true;\n      } else if (flags.import_block && current_token.type === TOKEN.RESERVED && current_token.text === 'from') {\n        flags.import_block = false;\n      }\n    }\n  }\n\n  function handle_semicolon() {\n    if (start_of_statement()) {\n      // The conditional starts the statement if appropriate.\n      // Semicolon can be the start (and end) of a statement\n      output.space_before_token = false;\n    } else {\n      handle_whitespace_and_comments(current_token);\n    }\n\n    var next_token = tokens.peek();\n    while (flags.mode === MODE.Statement &&\n      !(flags.if_block && next_token && next_token.type === TOKEN.RESERVED && next_token.text === 'else') &&\n      !flags.do_block) {\n      restore_mode();\n    }\n\n    // hacky but effective for the moment\n    if (flags.import_block) {\n      flags.import_block = false;\n    }\n    print_token();\n  }\n\n  function handle_string() {\n    if (start_of_statement()) {\n      // The conditional starts the statement if appropriate.\n      // One difference - strings want at least a space before\n      output.space_before_token = true;\n    } else {\n      handle_whitespace_and_comments(current_token);\n      if (last_type === TOKEN.RESERVED || last_type === TOKEN.WORD || flags.inline_frame) {\n        output.space_before_token = true;\n      } else if (last_type === TOKEN.COMMA || last_type === TOKEN.START_EXPR || last_type === TOKEN.EQUALS || last_type === TOKEN.OPERATOR) {\n        if (!start_of_object_property()) {\n          allow_wrap_or_preserved_newline();\n        }\n      } else {\n        print_newline();\n      }\n    }\n    print_token();\n  }\n\n  function handle_equals() {\n    if (start_of_statement()) {\n      // The conditional starts the statement if appropriate.\n    } else {\n      handle_whitespace_and_comments(current_token);\n    }\n\n    if (flags.declaration_statement) {\n      // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n      flags.declaration_assignment = true;\n    }\n    output.space_before_token = true;\n    print_token();\n    output.space_before_token = true;\n  }\n\n  function handle_comma() {\n    handle_whitespace_and_comments(current_token, true);\n\n    print_token();\n    output.space_before_token = true;\n    if (flags.declaration_statement) {\n      if (is_expression(flags.parent.mode)) {\n        // do not break on comma, for(var a = 1, b = 2)\n        flags.declaration_assignment = false;\n      }\n\n      if (flags.declaration_assignment) {\n        flags.declaration_assignment = false;\n        print_newline(false, true);\n      } else if (opt.comma_first) {\n        // for comma-first, we want to allow a newline before the comma\n        // to turn into a newline after the comma, which we will fixup later\n        allow_wrap_or_preserved_newline();\n      }\n    } else if (flags.mode === MODE.ObjectLiteral ||\n      (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {\n      if (flags.mode === MODE.Statement) {\n        restore_mode();\n      }\n\n      if (!flags.inline_frame) {\n        print_newline();\n      }\n    } else if (opt.comma_first) {\n      // EXPR or DO_BLOCK\n      // for comma-first, we want to allow a newline before the comma\n      // to turn into a newline after the comma, which we will fixup later\n      allow_wrap_or_preserved_newline();\n    }\n  }\n\n  function handle_operator() {\n    var isGeneratorAsterisk = current_token.text === '*' &&\n      ((last_type === TOKEN.RESERVED && in_array(flags.last_text, ['function', 'yield'])) ||\n        (in_array(last_type, [TOKEN.START_BLOCK, TOKEN.COMMA, TOKEN.END_BLOCK, TOKEN.SEMICOLON]))\n      );\n    var isUnary = in_array(current_token.text, ['-', '+']) && (\n      in_array(last_type, [TOKEN.START_BLOCK, TOKEN.START_EXPR, TOKEN.EQUALS, TOKEN.OPERATOR]) ||\n      in_array(flags.last_text, tokenizer.line_starters) ||\n      flags.last_text === ','\n    );\n\n    if (start_of_statement()) {\n      // The conditional starts the statement if appropriate.\n    } else {\n      var preserve_statement_flags = !isGeneratorAsterisk;\n      handle_whitespace_and_comments(current_token, preserve_statement_flags);\n    }\n\n    if (last_type === TOKEN.RESERVED && is_special_word(flags.last_text)) {\n      // \"return\" had a special handling in TK_WORD. Now we need to return the favor\n      output.space_before_token = true;\n      print_token();\n      return;\n    }\n\n    // hack for actionscript's import .*;\n    if (current_token.text === '*' && last_type === TOKEN.DOT) {\n      print_token();\n      return;\n    }\n\n    if (current_token.text === '::') {\n      // no spaces around exotic namespacing syntax operator\n      print_token();\n      return;\n    }\n\n    // Allow line wrapping between operators when operator_position is\n    //   set to before or preserve\n    if (last_type === TOKEN.OPERATOR && in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {\n      allow_wrap_or_preserved_newline();\n    }\n\n    if (current_token.text === ':' && flags.in_case) {\n      flags.case_body = true;\n      indent();\n      print_token();\n      print_newline();\n      flags.in_case = false;\n      return;\n    }\n\n    var space_before = true;\n    var space_after = true;\n    var in_ternary = false;\n    if (current_token.text === ':') {\n      if (flags.ternary_depth === 0) {\n        // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.\n        space_before = false;\n      } else {\n        flags.ternary_depth -= 1;\n        in_ternary = true;\n      }\n    } else if (current_token.text === '?') {\n      flags.ternary_depth += 1;\n    }\n\n    // let's handle the operator_position option prior to any conflicting logic\n    if (!isUnary && !isGeneratorAsterisk && opt.preserve_newlines && in_array(current_token.text, tokenizer.positionable_operators)) {\n      var isColon = current_token.text === ':';\n      var isTernaryColon = (isColon && in_ternary);\n      var isOtherColon = (isColon && !in_ternary);\n\n      switch (opt.operator_position) {\n        case OPERATOR_POSITION.before_newline:\n          // if the current token is : and it's not a ternary statement then we set space_before to false\n          output.space_before_token = !isOtherColon;\n\n          print_token();\n\n          if (!isColon || isTernaryColon) {\n            allow_wrap_or_preserved_newline();\n          }\n\n          output.space_before_token = true;\n          return;\n\n        case OPERATOR_POSITION.after_newline:\n          // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,\n          //   then print a newline.\n\n          output.space_before_token = true;\n\n          if (!isColon || isTernaryColon) {\n            if (tokens.peek().newlines) {\n              print_newline(false, true);\n            } else {\n              allow_wrap_or_preserved_newline();\n            }\n          } else {\n            output.space_before_token = false;\n          }\n\n          print_token();\n\n          output.space_before_token = true;\n          return;\n\n        case OPERATOR_POSITION.preserve_newline:\n          if (!isOtherColon) {\n            allow_wrap_or_preserved_newline();\n          }\n\n          // if we just added a newline, or the current token is : and it's not a ternary statement,\n          //   then we set space_before to false\n          space_before = !(output.just_added_newline() || isOtherColon);\n\n          output.space_before_token = space_before;\n          print_token();\n          output.space_before_token = true;\n          return;\n      }\n    }\n\n    if (isGeneratorAsterisk) {\n      allow_wrap_or_preserved_newline();\n      space_before = false;\n      var next_token = tokens.peek();\n      space_after = next_token && in_array(next_token.type, [TOKEN.WORD, TOKEN.RESERVED]);\n    } else if (current_token.text === '...') {\n      allow_wrap_or_preserved_newline();\n      space_before = last_type === TOKEN.START_BLOCK;\n      space_after = false;\n    } else if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {\n      // unary operators (and binary +/- pretending to be unary) special cases\n      if (last_type === TOKEN.COMMA || last_type === TOKEN.START_EXPR) {\n        allow_wrap_or_preserved_newline();\n      }\n\n      space_before = false;\n      space_after = false;\n\n      // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1\n      // if there is a newline between -- or ++ and anything else we should preserve it.\n      if (current_token.newlines && (current_token.text === '--' || current_token.text === '++')) {\n        print_newline(false, true);\n      }\n\n      if (flags.last_text === ';' && is_expression(flags.mode)) {\n        // for (;; ++i)\n        //        ^^^\n        space_before = true;\n      }\n\n      if (last_type === TOKEN.RESERVED) {\n        space_before = true;\n      } else if (last_type === TOKEN.END_EXPR) {\n        space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));\n      } else if (last_type === TOKEN.OPERATOR) {\n        // a++ + ++b;\n        // a - -b\n        space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);\n        // + and - are not unary when preceeded by -- or ++ operator\n        // a-- + b\n        // a * +b\n        // a - -b\n        if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {\n          space_after = true;\n        }\n      }\n\n\n      if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement) &&\n        (flags.last_text === '{' || flags.last_text === ';')) {\n        // { foo; --i }\n        // foo(); --bar;\n        print_newline();\n      }\n    }\n\n    output.space_before_token = output.space_before_token || space_before;\n    print_token();\n    output.space_before_token = space_after;\n  }\n\n  function handle_block_comment(preserve_statement_flags) {\n    if (output.raw) {\n      output.add_raw_token(current_token);\n      if (current_token.directives && current_token.directives.preserve === 'end') {\n        // If we're testing the raw output behavior, do not allow a directive to turn it off.\n        output.raw = opt.test_output_raw;\n      }\n      return;\n    }\n\n    if (current_token.directives) {\n      print_newline(false, preserve_statement_flags);\n      print_token();\n      if (current_token.directives.preserve === 'start') {\n        output.raw = true;\n      }\n      print_newline(false, true);\n      return;\n    }\n\n    // inline block\n    if (!acorn.newline.test(current_token.text) && !current_token.newlines) {\n      output.space_before_token = true;\n      print_token();\n      output.space_before_token = true;\n      return;\n    }\n\n    var lines = split_linebreaks(current_token.text);\n    var j; // iterator for this case\n    var javadoc = false;\n    var starless = false;\n    var lastIndent = current_token.whitespace_before;\n    var lastIndentLength = lastIndent.length;\n\n    // block comment starts with a new line\n    print_newline(false, preserve_statement_flags);\n    if (lines.length > 1) {\n      javadoc = all_lines_start_with(lines.slice(1), '*');\n      starless = each_line_matches_indent(lines.slice(1), lastIndent);\n    }\n\n    // first line always indented\n    print_token(lines[0]);\n    for (j = 1; j < lines.length; j++) {\n      print_newline(false, true);\n      if (javadoc) {\n        // javadoc: reformat and re-indent\n        print_token(' ' + ltrim(lines[j]));\n      } else if (starless && lines[j].length > lastIndentLength) {\n        // starless: re-indent non-empty content, avoiding trim\n        print_token(lines[j].substring(lastIndentLength));\n      } else {\n        // normal comments output raw\n        output.add_token(lines[j]);\n      }\n    }\n\n    // for comments of more than one line, make sure there's a new line after\n    print_newline(false, preserve_statement_flags);\n  }\n\n  function handle_comment(preserve_statement_flags) {\n    if (current_token.newlines) {\n      print_newline(false, preserve_statement_flags);\n    } else {\n      output.trim(true);\n    }\n\n    output.space_before_token = true;\n    print_token();\n    print_newline(false, preserve_statement_flags);\n  }\n\n  function handle_dot() {\n    if (start_of_statement()) {\n      // The conditional starts the statement if appropriate.\n    } else {\n      handle_whitespace_and_comments(current_token, true);\n    }\n\n    if (opt.unindent_chained_methods) {\n      deindent();\n    }\n\n    if (last_type === TOKEN.RESERVED && is_special_word(flags.last_text)) {\n      output.space_before_token = false;\n    } else {\n      // allow preserved newlines before dots in general\n      // force newlines on dots after close paren when break_chained - for bar().baz()\n      allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);\n    }\n\n    print_token();\n  }\n\n  function handle_unknown(preserve_statement_flags) {\n    print_token();\n\n    if (current_token.text[current_token.text.length - 1] === '\\n') {\n      print_newline(false, preserve_statement_flags);\n    }\n  }\n\n  function handle_eof() {\n    // Unwind any open statements\n    while (flags.mode === MODE.Statement) {\n      restore_mode();\n    }\n    handle_whitespace_and_comments(current_token);\n  }\n}\n\nmodule.exports.Beautifier = Beautifier;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nfunction Token(type, text, newlines, whitespace_before) {\n  this.type = type;\n  this.text = text;\n\n  // comments_before are\n  // comments that have a new line before them\n  // and may or may not have a newline after\n  // this is a set of comments before\n  this.comments_before = null; /* inline comment*/\n\n\n  // this.comments_after =  new TokenStream(); // no new line before and newline after\n  this.newlines = newlines || 0;\n  this.whitespace_before = whitespace_before || '';\n  this.parent = null;\n  this.previous = null;\n  this.opened = null;\n  this.directives = null;\n}\n\n\nmodule.exports.Token = Token;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nfunction TokenStream(parent_token) {\n  // private\n  this._tokens = [];\n  this._tokens_length = this._tokens.length;\n  this._position = 0;\n  this._parent_token = parent_token;\n}\n\nTokenStream.prototype.restart = function() {\n  this._position = 0;\n};\n\nTokenStream.prototype.isEmpty = function() {\n  return this._tokens_length === 0;\n};\n\nTokenStream.prototype.hasNext = function() {\n  return this._position < this._tokens_length;\n};\n\nTokenStream.prototype.next = function() {\n  var val = null;\n  if (this.hasNext()) {\n    val = this._tokens[this._position];\n    this._position += 1;\n  }\n  return val;\n};\n\nTokenStream.prototype.peek = function(index) {\n  var val = null;\n  index = index || 0;\n  index += this._position;\n  if (index >= 0 && index < this._tokens_length) {\n    val = this._tokens[index];\n  }\n  return val;\n};\n\nTokenStream.prototype.add = function(token) {\n  if (this._parent_token) {\n    token.parent = this._parent_token;\n  }\n  this._tokens.push(token);\n  this._tokens_length += 1;\n};\n\nmodule.exports.TokenStream = TokenStream;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar Beautifier = require('./beautifier').Beautifier;\n\nfunction css_beautify(source_text, options) {\n  var beautifier = new Beautifier(source_text, options);\n  return beautifier.beautify();\n}\n\nmodule.exports = css_beautify;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nvar mergeOpts = require('../core/options').mergeOpts;\nvar acorn = require('../core/acorn');\nvar Output = require('../core/output').Output;\nvar InputScanner = require('../core/inputscanner').InputScanner;\n\nvar lineBreak = acorn.lineBreak;\nvar allLineBreaks = acorn.allLineBreaks;\n\nfunction Beautifier(source_text, options) {\n  source_text = source_text || '';\n  options = options || {};\n\n  // Allow the setting of language/file-type specific options\n  // with inheritance of overall settings\n  options = mergeOpts(options, 'css');\n\n  var indentSize = options.indent_size ? parseInt(options.indent_size, 10) : 4;\n  var indentCharacter = options.indent_char || ' ';\n  var preserve_newlines = (options.preserve_newlines === undefined) ? false : options.preserve_newlines;\n  var selectorSeparatorNewline = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;\n  var end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n  var newline_between_rules = (options.newline_between_rules === undefined) ? true : options.newline_between_rules;\n  var space_around_combinator = (options.space_around_combinator === undefined) ? false : options.space_around_combinator;\n  space_around_combinator = space_around_combinator || ((options.space_around_selector_separator === undefined) ? false : options.space_around_selector_separator);\n  var eol = options.eol ? options.eol : 'auto';\n\n  if (options.indent_with_tabs) {\n    indentCharacter = '\\t';\n    indentSize = 1;\n  }\n\n  if (eol === 'auto') {\n    eol = '\\n';\n    if (source_text && lineBreak.test(source_text || '')) {\n      eol = source_text.match(lineBreak)[0];\n    }\n  }\n\n  eol = eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n  // HACK: newline parsing inconsistent. This brute force normalizes the input.\n  source_text = source_text.replace(allLineBreaks, '\\n');\n\n  // tokenizer\n  var whitespaceChar = /\\s/;\n  var whitespacePattern = /(?:\\s|\\n)+/g;\n  var block_comment_pattern = /\\/\\*(?:[\\s\\S]*?)((?:\\*\\/)|$)/g;\n  var comment_pattern = /\\/\\/(?:[^\\n\\r\\u2028\\u2029]*)/g;\n\n  var ch;\n  var parenLevel = 0;\n  var input;\n\n  function eatString(endChars) {\n    var result = '';\n    ch = input.next();\n    while (ch) {\n      result += ch;\n      if (ch === \"\\\\\") {\n        result += input.next();\n      } else if (endChars.indexOf(ch) !== -1 || ch === \"\\n\") {\n        break;\n      }\n      ch = input.next();\n    }\n    return result;\n  }\n\n  // Skips any white space in the source text from the current position.\n  // When allowAtLeastOneNewLine is true, will output new lines for each\n  // newline character found; if the user has preserve_newlines off, only\n  // the first newline will be output\n  function eatWhitespace(allowAtLeastOneNewLine) {\n    var result = whitespaceChar.test(input.peek());\n    var isFirstNewLine = true;\n\n    while (whitespaceChar.test(input.peek())) {\n      ch = input.next();\n      if (allowAtLeastOneNewLine && ch === '\\n') {\n        if (preserve_newlines || isFirstNewLine) {\n          isFirstNewLine = false;\n          output.add_new_line(true);\n        }\n      }\n    }\n    return result;\n  }\n\n  // Nested pseudo-class if we are insideRule\n  // and the next special character found opens\n  // a new block\n  function foundNestedPseudoClass() {\n    var openParen = 0;\n    var i = 1;\n    var ch = input.peek(i);\n    while (ch) {\n      if (ch === \"{\") {\n        return true;\n      } else if (ch === '(') {\n        // pseudoclasses can contain ()\n        openParen += 1;\n      } else if (ch === ')') {\n        if (openParen === 0) {\n          return false;\n        }\n        openParen -= 1;\n      } else if (ch === \";\" || ch === \"}\") {\n        return false;\n      }\n      i++;\n      ch = input.peek(i);\n    }\n    return false;\n  }\n\n  // printer\n  var baseIndentString = '';\n  var preindent_index = 0;\n  if (source_text && source_text.length) {\n    while ((source_text.charAt(preindent_index) === ' ' ||\n        source_text.charAt(preindent_index) === '\\t')) {\n      preindent_index += 1;\n    }\n    baseIndentString = source_text.substring(0, preindent_index);\n    source_text = source_text.substring(preindent_index);\n  }\n\n\n  var singleIndent = new Array(indentSize + 1).join(indentCharacter);\n  var indentLevel;\n  var nestedLevel;\n  var output;\n\n  function print_string(output_string) {\n    if (output.just_added_newline()) {\n      output.set_indent(indentLevel);\n    }\n    output.add_token(output_string);\n  }\n\n  function preserveSingleSpace(isAfterSpace) {\n    if (isAfterSpace) {\n      output.space_before_token = true;\n    }\n  }\n\n  function indent() {\n    indentLevel++;\n  }\n\n  function outdent() {\n    if (indentLevel > 0) {\n      indentLevel--;\n    }\n  }\n\n  /*_____________________--------------------_____________________*/\n\n  this.beautify = function() {\n    // reset\n    output = new Output(singleIndent, baseIndentString);\n    input = new InputScanner(source_text);\n    indentLevel = 0;\n    nestedLevel = 0;\n\n    ch = null;\n    parenLevel = 0;\n\n    var insideRule = false;\n    // This is the value side of a property value pair (blue in the following ex)\n    // label { content: blue }\n    var insidePropertyValue = false;\n    var enteringConditionalGroup = false;\n    var insideAtExtend = false;\n\n    while (true) {\n      var whitespace = input.read(whitespacePattern);\n      var isAfterSpace = whitespace !== '';\n      ch = input.next();\n\n      if (!ch) {\n        break;\n      } else if (ch === '/' && input.peek() === '*') {\n        // /* css comment */\n        // Always start block comments on a new line.\n        // This handles scenarios where a block comment immediately\n        // follows a property definition on the same line or where\n        // minified code is being beautified.\n        output.add_new_line();\n        input.back();\n        print_string(input.read(block_comment_pattern));\n\n        // Ensures any new lines following the comment are preserved\n        eatWhitespace(true);\n\n        // Block comments are followed by a new line so they don't\n        // share a line with other properties\n        output.add_new_line();\n      } else if (ch === '/' && input.peek() === '/') {\n        // // single line comment\n        // Preserves the space before a comment\n        // on the same line as a rule\n        output.space_before_token = true;\n        input.back();\n        print_string(input.read(comment_pattern));\n\n        // Ensures any new lines following the comment are preserved\n        eatWhitespace(true);\n      } else if (ch === '@') {\n        preserveSingleSpace(isAfterSpace);\n\n        // deal with less propery mixins @{...}\n        if (input.peek() === '{') {\n          print_string(ch + eatString('}'));\n        } else {\n          print_string(ch);\n\n          // strip trailing space, if present, for hash property checks\n          var variableOrRule = input.peekUntilAfter(/[: ,;{}()[\\]\\/='\"]/g);\n\n          if (variableOrRule.match(/[ :]$/)) {\n            // we have a variable or pseudo-class, add it and insert one space before continuing\n            variableOrRule = eatString(\": \").replace(/\\s$/, '');\n            print_string(variableOrRule);\n            output.space_before_token = true;\n          }\n\n          variableOrRule = variableOrRule.replace(/\\s$/, '');\n\n          if (variableOrRule === 'extend') {\n            insideAtExtend = true;\n          }\n\n          // might be a nesting at-rule\n          if (variableOrRule in this.NESTED_AT_RULE) {\n            nestedLevel += 1;\n            if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {\n              enteringConditionalGroup = true;\n            }\n            // might be less variable\n          } else if (!insideRule && parenLevel === 0 && variableOrRule.indexOf(':') !== -1) {\n            insidePropertyValue = true;\n          }\n        }\n      } else if (ch === '#' && input.peek() === '{') {\n        preserveSingleSpace(isAfterSpace);\n        print_string(ch + eatString('}'));\n      } else if (ch === '{') {\n        if (input.match(/[\\t\\n ]*}/g)) {\n          output.space_before_token = true;\n          print_string(\"{}\");\n\n          eatWhitespace(true);\n          output.add_new_line();\n\n          if (newline_between_rules && indentLevel === 0 && !output.just_added_blankline()) {\n            output.add_new_line(true);\n          }\n        } else {\n          indent();\n          output.space_before_token = true;\n          print_string(ch);\n          eatWhitespace(true);\n          output.add_new_line();\n\n          // when entering conditional groups, only rulesets are allowed\n          if (enteringConditionalGroup) {\n            enteringConditionalGroup = false;\n            insideRule = (indentLevel > nestedLevel);\n          } else {\n            // otherwise, declarations are also allowed\n            insideRule = (indentLevel >= nestedLevel);\n          }\n        }\n      } else if (ch === '}') {\n        outdent();\n        output.add_new_line();\n        print_string(ch);\n        insideRule = false;\n        insidePropertyValue = false;\n        if (nestedLevel) {\n          nestedLevel--;\n        }\n\n        eatWhitespace(true);\n        output.add_new_line();\n\n        if (newline_between_rules && indentLevel === 0 && !output.just_added_blankline()) {\n          output.add_new_line(true);\n        }\n      } else if (ch === \":\") {\n        if ((insideRule || enteringConditionalGroup) &&\n          !(input.lookBack(\"&\") || foundNestedPseudoClass()) &&\n          !input.lookBack(\"(\") && !insideAtExtend) {\n          // 'property: value' delimiter\n          // which could be in a conditional group query\n          print_string(':');\n          if (!insidePropertyValue) {\n            insidePropertyValue = true;\n            output.space_before_token = true;\n          }\n        } else {\n          // sass/less parent reference don't use a space\n          // sass nested pseudo-class don't use a space\n\n          // preserve space before pseudoclasses/pseudoelements, as it means \"in any child\"\n          if (input.lookBack(\" \")) {\n            output.space_before_token = true;\n          }\n          if (input.peek() === \":\") {\n            // pseudo-element\n            ch = input.next();\n            print_string(\"::\");\n          } else {\n            // pseudo-class\n            print_string(':');\n          }\n        }\n      } else if (ch === '\"' || ch === '\\'') {\n        preserveSingleSpace(isAfterSpace);\n        print_string(ch + eatString(ch));\n      } else if (ch === ';') {\n        insidePropertyValue = false;\n        insideAtExtend = false;\n        print_string(ch);\n        eatWhitespace(true);\n\n        // This maintains single line comments on the same\n        // line. Block comments are also affected, but\n        // a new line is always output before one inside\n        // that section\n        if (input.peek() !== '/') {\n          output.add_new_line();\n        }\n      } else if (ch === '(') { // may be a url\n        if (input.lookBack(\"url\")) {\n          print_string(ch);\n          eatWhitespace();\n          ch = input.next();\n          if (ch) {\n            if (ch !== ')' && ch !== '\"' && ch !== '\\'') {\n              print_string(ch + eatString(')'));\n            } else {\n              input.back();\n              parenLevel++;\n            }\n          }\n        } else {\n          parenLevel++;\n          preserveSingleSpace(isAfterSpace);\n          print_string(ch);\n          eatWhitespace();\n        }\n      } else if (ch === ')') {\n        print_string(ch);\n        parenLevel--;\n      } else if (ch === ',') {\n        print_string(ch);\n        eatWhitespace(true);\n        if (selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {\n          output.add_new_line();\n        } else {\n          output.space_before_token = true;\n        }\n      } else if ((ch === '>' || ch === '+' || ch === '~') &&\n        !insidePropertyValue && parenLevel < 1) {\n        //handle combinator spacing\n        if (space_around_combinator) {\n          output.space_before_token = true;\n          print_string(ch);\n          output.space_before_token = true;\n        } else {\n          print_string(ch);\n          eatWhitespace();\n          // squash extra whitespace\n          if (ch && whitespaceChar.test(ch)) {\n            ch = '';\n          }\n        }\n      } else if (ch === ']') {\n        print_string(ch);\n      } else if (ch === '[') {\n        preserveSingleSpace(isAfterSpace);\n        print_string(ch);\n      } else if (ch === '=') { // no whitespace before or after\n        eatWhitespace();\n        print_string('=');\n        if (whitespaceChar.test(ch)) {\n          ch = '';\n        }\n      } else if (ch === '!') { // !important\n        print_string(' ');\n        print_string(ch);\n      } else {\n        preserveSingleSpace(isAfterSpace);\n        print_string(ch);\n      }\n    }\n\n    var sweetCode = output.get_code(end_with_newline, eol);\n\n    return sweetCode;\n  };\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n  this.NESTED_AT_RULE = {\n    \"@page\": true,\n    \"@font-face\": true,\n    \"@keyframes\": true,\n    // also in CONDITIONAL_GROUP_RULE below\n    \"@media\": true,\n    \"@supports\": true,\n    \"@document\": true\n  };\n  this.CONDITIONAL_GROUP_RULE = {\n    \"@media\": true,\n    \"@supports\": true,\n    \"@document\": true\n  };\n}\n\nmodule.exports.Beautifier = Beautifier;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n    The MIT License (MIT)\n\n    Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvar Beautifier = require('./beautifier').Beautifier;\n\nfunction style_html(html_source, options, js_beautify, css_beautify) {\n  var beautifier = new Beautifier(html_source, options, js_beautify, css_beautify);\n  return beautifier.beautify();\n}\n\nmodule.exports = style_html;","/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nvar mergeOpts = require('../core/options').mergeOpts;\nvar acorn = require('../core/acorn');\nvar InputScanner = require('../core/inputscanner').InputScanner;\nvar Tokenizer = require('../html/tokenizer').Tokenizer;\nvar TOKEN = require('../html/tokenizer').TOKEN;\n\nvar lineBreak = acorn.lineBreak;\nvar allLineBreaks = acorn.allLineBreaks;\n\n// function trim(s) {\n//     return s.replace(/^\\s+|\\s+$/g, '');\n// }\n\nfunction ltrim(s) {\n  return s.replace(/^\\s+/g, '');\n}\n\nfunction rtrim(s) {\n  return s.replace(/\\s+$/g, '');\n}\n\nfunction Beautifier(html_source, options, js_beautify, css_beautify) {\n  //Wrapper function to invoke all the necessary constructors and deal with the output.\n  html_source = html_source || '';\n  options = options || {};\n\n  var multi_parser,\n    indent_inner_html,\n    indent_body_inner_html,\n    indent_head_inner_html,\n    indent_size,\n    indent_character,\n    wrap_line_length,\n    brace_style,\n    inline_tags,\n    unformatted,\n    content_unformatted,\n    preserve_newlines,\n    max_preserve_newlines,\n    indent_handlebars,\n    wrap_attributes,\n    wrap_attributes_indent_size,\n    is_wrap_attributes_force,\n    is_wrap_attributes_force_expand_multiline,\n    is_wrap_attributes_force_aligned,\n    is_wrap_attributes_aligned_multiple,\n    end_with_newline,\n    extra_liners,\n    eol;\n\n  // Allow the setting of language/file-type specific options\n  // with inheritance of overall settings\n  options = mergeOpts(options, 'html');\n\n  // backwards compatibility to 1.3.4\n  if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&\n    (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {\n    options.wrap_line_length = options.max_char;\n  }\n\n  indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;\n  indent_body_inner_html = (options.indent_body_inner_html === undefined) ? true : options.indent_body_inner_html;\n  indent_head_inner_html = (options.indent_head_inner_html === undefined) ? true : options.indent_head_inner_html;\n  indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);\n  indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;\n  brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;\n  wrap_line_length = parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);\n  inline_tags = options.inline || [\n    // https://www.w3.org/TR/html5/dom.html#phrasing-content\n    'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',\n    'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',\n    'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',\n    'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',\n    'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',\n    'video', 'wbr', 'text',\n    // prexisting - not sure of full effect of removing, leaving in\n    'acronym', 'address', 'big', 'dt', 'ins', 'strike', 'tt'\n  ];\n  unformatted = options.unformatted || [];\n  content_unformatted = options.content_unformatted || [\n    'pre', 'textarea'\n  ];\n  preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n  max_preserve_newlines = preserve_newlines ?\n    (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10)) :\n    0;\n  indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;\n  wrap_attributes = (options.wrap_attributes === undefined) ? 'auto' : options.wrap_attributes;\n  wrap_attributes_indent_size = (isNaN(parseInt(options.wrap_attributes_indent_size, 10))) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10);\n  is_wrap_attributes_force = wrap_attributes.substr(0, 'force'.length) === 'force';\n  is_wrap_attributes_force_expand_multiline = (wrap_attributes === 'force-expand-multiline');\n  is_wrap_attributes_force_aligned = (wrap_attributes === 'force-aligned');\n  is_wrap_attributes_aligned_multiple = (wrap_attributes === 'aligned-multiple');\n  end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n  extra_liners = (typeof options.extra_liners === 'object') && options.extra_liners ?\n    options.extra_liners.concat() : (typeof options.extra_liners === 'string') ?\n    options.extra_liners.split(',') : 'head,body,/html'.split(',');\n  eol = options.eol ? options.eol : 'auto';\n\n  if (options.indent_with_tabs) {\n    indent_character = '\\t';\n    indent_size = 1;\n  }\n\n  if (eol === 'auto') {\n    eol = '\\n';\n    if (html_source && lineBreak.test(html_source || '')) {\n      eol = html_source.match(lineBreak)[0];\n    }\n  }\n\n  eol = eol.replace(/\\\\r/, '\\r').replace(/\\\\n/, '\\n');\n\n  // HACK: newline parsing inconsistent. This brute force normalizes the input.\n  html_source = html_source.replace(allLineBreaks, '\\n');\n\n  this._tokens = null;\n\n  this._options = {};\n  this._options.indent_handlebars = indent_handlebars;\n  this._options.unformatted = unformatted || [];\n  this._options.content_unformatted = content_unformatted || [];\n\n\n\n  function Parser() {\n\n    this.parser_token = '';\n    this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values\n      parent: null,\n      tag: '',\n      indent_level: 0,\n      parser_token: null\n    };\n    this.last_token = {\n      text: '',\n      type: ''\n    };\n    this.token_text = '';\n    this.newlines = 0;\n    this.indent_content = indent_inner_html;\n    this.indent_body_inner_html = indent_body_inner_html;\n    this.indent_head_inner_html = indent_head_inner_html;\n\n    this.Utils = { //Uilities made available to the various functions\n      whitespace: \"\\n\\r\\t \".split(''),\n\n      single_token: options.void_elements || [\n        // HTLM void elements - aka self-closing tags - aka singletons\n        // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n        'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n        'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',\n        // NOTE: Optional tags - are not understood.\n        // https://www.w3.org/TR/html5/syntax.html#optional-tags\n        // The rules for optional tags are too complex for a simple list\n        // Also, the content of these tags should still be indented in many cases.\n        // 'li' is a good exmple.\n\n        // Doctype and xml elements\n        '!doctype', '?xml',\n        // ?php and ?= tags\n        '?php', '?=',\n        // other tags that were in this list, keeping just in case\n        'basefont', 'isindex'\n      ],\n      extra_liners: extra_liners, //for tags that need a line of whitespace before them\n      in_array: function(what, arr) {\n        return arr.indexOf(what) !== -1;\n      }\n    };\n\n    this.record_tag = function(tag, parser_token) { //function to record a tag and its parent in this.tags Object\n      var new_tag = {\n        parent: this.tags,\n        tag: tag,\n        indent_level: this.indent_level,\n        parser_token: parser_token\n      };\n\n      this.tags = new_tag;\n    };\n\n    this.retrieve_tag = function(tag) { //function to retrieve the opening tag to the corresponding closer\n      var parser_token = null;\n      var temp_parent = this.tags;\n\n      while (temp_parent) { //till we reach '' (the initial value);\n        if (temp_parent.tag === tag) { //if this is it use it\n          break;\n        }\n        temp_parent = temp_parent.parent;\n      }\n\n\n      if (temp_parent) {\n        parser_token = temp_parent.parser_token;\n        this.indent_level = temp_parent.indent_level;\n        this.tags = temp_parent.parent;\n\n      }\n      return parser_token;\n    };\n\n    this.indent_to_tag = function(tag_list) {\n      var temp_parent = this.tags;\n\n      while (temp_parent) { //till we reach '' (the initial value);\n        if (tag_list.indexOf(temp_parent.tag) !== -1) { //if this is it use it\n          break;\n        }\n        temp_parent = temp_parent.parent;\n      }\n\n      if (temp_parent) {\n        this.indent_level = temp_parent.indent_level;\n      }\n    };\n\n    this.get_tag = function(raw_token) { //function to get a full tag and parse its type\n      var parser_token = {\n          parent: this.tags.parser_token,\n          text: '',\n          type: '',\n          tag_name: '',\n          is_inline_tag: false,\n          is_unformatted: false,\n          is_content_unformatted: false,\n          is_opening_tag: false,\n          is_closing_tag: false,\n          multiline_content: false,\n          start_tag_token: null\n        },\n        content = [],\n        space = false,\n        attr_count = 0,\n        has_wrapped_attrs = false,\n        tag_reading_finished = false,\n        tag_start_char,\n        tag_check = '',\n        alignment_size = wrap_attributes_indent_size,\n        alignment_string = '',\n        custom_beautifier = false;\n\n      tag_start_char = raw_token.text[0];\n      if (tag_start_char === '<') {\n        tag_check = raw_token.text.match(/^<([^\\s>]*)/)[1];\n      } else {\n        tag_check = raw_token.text.match(/^{{\\#?([^\\s}]+)/)[1];\n      }\n      tag_check = tag_check.toLowerCase();\n\n      if (raw_token.type === TOKEN.COMMENT) {\n        tag_reading_finished = true;\n      } else if (raw_token.type === TOKEN.TAG_OPEN) {\n        space = tag_start_char === '<' || this._tokens.peek().type !== TOKEN.TAG_CLOSE;\n      } else {\n        throw \"Unhandled token!\";\n      }\n\n      parser_token.is_closing_tag = tag_check.charAt(0) === '/';\n      parser_token.tag_name = parser_token.is_closing_tag ? tag_check.substr(1) : tag_check;\n      parser_token.is_inline_tag = this.Utils.in_array(parser_token.tag_name, inline_tags) || tag_start_char === '{';\n      parser_token.is_unformatted = this.Utils.in_array(tag_check, unformatted);\n      parser_token.is_content_unformatted = this.Utils.in_array(tag_check, content_unformatted);\n\n      if (parser_token.is_unformatted || parser_token.is_content_unformatted) {\n        // do not assign type to unformatted yet.\n      } else if (this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)\n        parser_token.type = 'TK_TAG_SINGLE';\n        parser_token.is_closing_tag = true;\n      } else if (indent_handlebars && tag_start_char === '{' && tag_check === 'else') {\n        this.indent_to_tag(['if', 'unless']);\n        parser_token.type = 'TK_TAG_HANDLEBARS_ELSE';\n        this.indent_content = true;\n      } else if (indent_handlebars && tag_start_char === '{' && (/[^#\\^\\/]/.test(raw_token.text.charAt(2)))) {\n        parser_token.type = 'TK_TAG_SINGLE';\n        parser_token.is_closing_tag = true;\n      } else if (tag_check.charAt(0) === '!') { //peek for <! comment\n        // for comments content is already correct.\n        parser_token.type = 'TK_TAG_SINGLE';\n      } else if (parser_token.is_closing_tag) { //this tag is a double tag so check for tag-ending\n        parser_token.start_tag_token = this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors\n        parser_token.type = 'TK_TAG_END';\n      }\n\n      this.traverse_whitespace(raw_token);\n\n      if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line\n        this.print_newline(false, this.output);\n        if (this.output.length && this.output[this.output.length - 2] !== '\\n') {\n          this.print_newline(true, this.output);\n        }\n      }\n\n      this.print_indentation(this.output);\n\n      this.add_text_item(content, raw_token.text);\n\n      if (!tag_reading_finished && this._tokens.peek().type !== TOKEN.EOF) {\n        //indent attributes an auto, forced, aligned or forced-align line-wrap\n        if (is_wrap_attributes_force_aligned || is_wrap_attributes_aligned_multiple) {\n          alignment_size = raw_token.text.length + 1;\n        }\n\n        // only ever further indent with spaces since we're trying to align characters\n        alignment_string = Array(alignment_size + 1).join(' ');\n\n        // By default, use the custom beautifiers for script and style\n        custom_beautifier = tag_check === 'script' || tag_check === 'style';\n\n        raw_token = this._tokens.next();\n        while (raw_token.type !== TOKEN.EOF) {\n\n          if (parser_token.is_unformatted) {\n            this.add_raw_token(content, raw_token);\n            if (raw_token.type === TOKEN.TAG_CLOSE || this._tokens.peek().type === TOKEN.EOF) {\n              break;\n            }\n\n            raw_token = this._tokens.next();\n            continue;\n          }\n\n          if (tag_start_char === '<') {\n            if (raw_token.type === TOKEN.ATTRIBUTE) {\n              space = true;\n              attr_count += 1;\n\n              if ((tag_check === 'script' || tag_check === 'style') && raw_token.text === 'type') {\n                // For script and style tags that have a type attribute, only enable custom beautifiers for matching values\n                custom_beautifier = false;\n                var peekEquals = this._tokens.peek();\n                var peekValue = this._tokens.peek(1);\n                if (peekEquals && peekEquals.type === TOKEN.EQUALS && peekValue && peekValue.type === TOKEN.VALUE) {\n                  custom_beautifier = custom_beautifier ||\n                    (tag_check === 'script' && peekValue.text.search(/(text|application|dojo)\\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\\+)?json|method|aspect)/) > -1) ||\n                    (tag_check === 'style' && peekValue.text.search('text/css') > -1);\n                }\n              } else if (raw_token.type === TOKEN.EQUALS) { //no space before =\n                space = false;\n              } else if (raw_token.type === TOKEN.VALUE && raw_token.previous.type === TOKEN.EQUALS) { //no space before value\n                space = false;\n              }\n            } else if (raw_token.type === TOKEN.TEXT) {\n              space = true;\n            } else if (raw_token.type === TOKEN.TAG_CLOSE) {\n              space = raw_token.text[0] === '/'; // space before />, no space before >\n            } else {\n              space = raw_token.newlines || raw_token.whitespace_before !== '';\n            }\n\n            if (is_wrap_attributes_force_expand_multiline && has_wrapped_attrs && raw_token.type === TOKEN.TAG_CLOSE) {\n              space = false;\n              this.print_newline(false, content);\n              this.print_indentation(content);\n            }\n\n          }\n\n          if (space) {\n            space = false;\n            if (tag_start_char === '{') {\n              content[content.length - 1] += ' ';\n              this.line_char_count++;\n            } else {\n              var wrapped = this.print_space_or_wrap(content, raw_token.text);\n              if (raw_token.type === TOKEN.ATTRIBUTE) {\n                var indentAttrs = wrapped && !is_wrap_attributes_force;\n\n                if (is_wrap_attributes_force) {\n                  var force_first_attr_wrap = false;\n                  if (is_wrap_attributes_force_expand_multiline && attr_count === 1) {\n                    var is_only_attribute = true;\n                    var peek_index = 0;\n                    var peek_token;\n                    do {\n                      peek_token = this._tokens.peek(peek_index);\n                      if (peek_token.type === TOKEN.ATTRIBUTE) {\n                        is_only_attribute = false;\n                        break;\n                      }\n                      peek_index += 1;\n                    } while (peek_index < 4 && peek_token.type !== TOKEN.EOF && peek_token.type !== TOKEN.TAG_CLOSE);\n\n                    force_first_attr_wrap = !is_only_attribute;\n                  }\n\n                  if (attr_count > 1 || force_first_attr_wrap) {\n                    this.print_newline(false, content);\n                    this.print_indentation(content);\n                    indentAttrs = true;\n                  }\n                }\n                if (indentAttrs) {\n                  has_wrapped_attrs = true;\n                  content.push(alignment_string);\n                  this.line_char_count += alignment_size;\n                }\n              }\n            }\n          }\n\n          this.add_text_item(content, raw_token.text);\n          if (raw_token.type === TOKEN.TAG_CLOSE || this._tokens.peek().type === TOKEN.EOF) {\n            break;\n          }\n\n          raw_token = this._tokens.next();\n        }\n      }\n      var tag_complete;\n\n      if (tag_check === 'script' || tag_check === 'style') {\n        tag_complete = content.join('');\n      }\n\n      if (!parser_token.type) {\n        if (content.length > 1 && content[content.length - 1] === '/>') {\n          parser_token.type = 'TK_TAG_SINGLE';\n          parser_token.is_closing_tag = true;\n        } else if (parser_token.is_unformatted || parser_token.is_content_unformatted) {\n          // do not reformat the \"unformatted\" or \"content_unformatted\" tags\n          if (this._tokens.peek().type === TOKEN.TEXT) {\n            this.add_raw_token(content, this._tokens.next());\n          }\n\n          if (this._tokens.peek().type === TOKEN.TAG_OPEN) {\n            this.add_raw_token(content, this._tokens.next());\n            if (this._tokens.peek().type === TOKEN.TAG_CLOSE) {\n              this.add_raw_token(content, this._tokens.next());\n            }\n          }\n          parser_token.type = 'TK_TAG_SINGLE';\n          parser_token.is_closing_tag = true;\n        } else if (custom_beautifier) {\n          this.record_tag(tag_check);\n          if (tag_check === 'script') {\n            parser_token.type = 'TK_TAG_SCRIPT';\n          } else {\n            parser_token.type = 'TK_TAG_STYLE';\n          }\n        } else if (!parser_token.is_closing_tag) { // it's a start-tag\n          this.record_tag(tag_check, parser_token); //push it on the tag stack\n          if (tag_check !== 'html') {\n            this.indent_content = true;\n          }\n          parser_token.type = 'TK_TAG_START';\n          parser_token.is_opening_tag = true;\n        }\n      }\n\n      parser_token.text = content.join('');\n\n      return parser_token; //returns fully formatted tag\n    };\n\n    this.get_full_indent = function(level) {\n      level = this.indent_level + (level || 0);\n      if (level < 1) {\n        return '';\n      }\n\n      return Array(level + 1).join(this.indent_string);\n    };\n\n    this.printer = function(source_text, tokens, indent_character, indent_size, wrap_line_length, brace_style) { //handles input/output and some other printing functions\n\n      source_text = source_text || '';\n\n      // HACK: newline parsing inconsistent. This brute force normalizes the input.\n      source_text = source_text.replace(/\\r\\n|[\\r\\u2028\\u2029]/g, '\\n');\n\n      this.input = new InputScanner(source_text); //gets the input for the Parser\n      this._tokens = tokens;\n      this.output = [];\n      this.indent_character = indent_character;\n      this.indent_string = '';\n      this.indent_size = indent_size;\n      this.brace_style = brace_style;\n      this.indent_level = 0;\n      this.wrap_line_length = wrap_line_length;\n      this.line_char_count = 0; //count to see if wrap_line_length was exceeded\n\n      for (var i = 0; i < this.indent_size; i++) {\n        this.indent_string += this.indent_character;\n      }\n\n      this.add_text_item = function(arr, text) {\n        if (text) {\n          arr.push(text);\n          this.line_char_count += text.length;\n        }\n      };\n\n      this.add_raw_token = function(arr, token) {\n        for (var x = 0; x < token.newlines; x++) {\n          this.print_newline(true, arr);\n        }\n        this.add_text_item(arr, token.whitespace_before);\n        this.add_multiline_item(arr, token.text);\n      };\n\n      this.add_multiline_item = function(arr, text) {\n        if (text) {\n          this.add_text_item(arr, text);\n          var last_newline_index = text.lastIndexOf('\\n');\n          if (last_newline_index !== -1) {\n            this.line_char_count = text.length - last_newline_index;\n          }\n        }\n      };\n\n      this.traverse_whitespace = function(raw_token) {\n        if (raw_token.whitespace_before || raw_token.newlines) {\n          if (this.output.length) {\n\n            var newlines = 0;\n\n            if (raw_token.type !== TOKEN.TEXT && raw_token.previous.type !== TOKEN.TEXT) {\n              newlines = raw_token.newlines ? 1 : 0;\n            }\n\n            if (preserve_newlines) {\n              newlines = raw_token.newlines < max_preserve_newlines + 1 ? raw_token.newlines : max_preserve_newlines + 1;\n            }\n\n            for (var n = 0; n < newlines; n++) {\n              this.print_newline(n > 0, this.output);\n            }\n            this.print_space_or_wrap(this.output, raw_token.text);\n          }\n          return true;\n        }\n        return false;\n      };\n\n      // Append a space to the given content (string array) or, if we are\n      // at the wrap_line_length, append a newline/indentation.\n      // return true if a newline was added, false if a space was added\n      this.print_space_or_wrap = function(content, text) {\n        if (content && content.length) {\n          if (this.line_char_count + text.length + 1 >= this.wrap_line_length) { //insert a line when the wrap_line_length is reached\n            this.print_newline(false, content);\n            this.print_indentation(content);\n            return true;\n          } else {\n            var previous = content[content.length - 1];\n            if (!this.Utils.in_array(previous[previous.length - 1], this.Utils.whitespace)) {\n              this.line_char_count++;\n              content[content.length - 1] += ' ';\n            }\n          }\n        }\n        return false;\n      };\n\n      this.print_newline = function(force, arr) {\n        if (!arr || !arr.length) {\n          return;\n        }\n        var previous = arr[arr.length - 1];\n        var previous_rtrim = rtrim(previous);\n\n        if (force || (previous_rtrim !== '')) { //we might want the extra line\n          this.line_char_count = 0;\n          if (previous !== '\\n') {\n            arr[arr.length - 1] = previous_rtrim;\n          }\n          arr.push('\\n');\n        }\n      };\n\n      this.print_indentation = function(arr) {\n        if (arr && arr.length) {\n          var previous = arr[arr.length - 1];\n          if (previous === '\\n') {\n            this.add_text_item(arr, this.get_full_indent());\n          }\n        }\n      };\n\n      this.print_token = function(text, count_chars) {\n        // Avoid printing initial whitespace.\n        if (text || text !== '') {\n          if (this.output.length) {\n            this.print_indentation(this.output);\n            var previous = this.output[this.output.length - 1];\n            if (this.Utils.in_array(previous[previous.length - 1], this.Utils.whitespace)) {\n              text = ltrim(text);\n            }\n          } else {\n            text = ltrim(text);\n          }\n        }\n        if (count_chars) {\n          this.line_char_count += text.length;\n        }\n        this.print_token_raw(text);\n      };\n\n      this.print_token_raw = function(text) {\n        if (text && text !== '') {\n          if (text.length > 1 && text.charAt(text.length - 1) === '\\n') {\n            // unformatted tags can grab newlines as their last character\n            this.output.push(text.slice(0, -1));\n            this.print_newline(false, this.output);\n          } else {\n            this.output.push(text);\n          }\n        }\n\n      };\n\n      this.indent = function() {\n        this.indent_level++;\n      };\n\n      this.unindent = function() {\n        if (this.indent_level > 0) {\n          this.indent_level--;\n        }\n      };\n    };\n    return this;\n  }\n\n  /*_____________________--------------------_____________________*/\n\n  this.beautify = function() {\n    multi_parser = new Parser(); //wrapping functions Parser\n    this._tokens = new Tokenizer(html_source, this._options).tokenize();\n    multi_parser.printer(html_source, this._tokens, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values d  d\n\n    var parser_token = null;\n    var last_tag_token = {\n      text: '',\n      type: '',\n      tag_name: '',\n      is_opening_tag: false,\n      is_closing_tag: false,\n      is_inline_tag: false\n    };\n    raw_token = this._tokens.next();\n    while (raw_token.type !== TOKEN.EOF) {\n\n      if (multi_parser.last_token.type === 'TK_TAG_SCRIPT' || multi_parser.last_token.type === 'TK_TAG_STYLE') { //check if we need to format javascript\n        var type = multi_parser.last_token.type.substr(7);\n        parser_token = { text: raw_token.text, type: 'TK_' + type };\n      } else if (raw_token.type === TOKEN.TAG_OPEN || raw_token.type === TOKEN.COMMENT) {\n        parser_token = multi_parser.get_tag(raw_token);\n      } else if (raw_token.type === TOKEN.TEXT) {\n        parser_token = { text: raw_token.text, type: 'TK_CONTENT' };\n      }\n\n      switch (parser_token.type) {\n        case 'TK_TAG_START':\n          if (!parser_token.is_inline_tag && multi_parser.last_token.type !== 'TK_CONTENT') {\n            if (parser_token.parent) {\n              parser_token.parent.multiline_content = true;\n            }\n            multi_parser.print_newline(false, multi_parser.output);\n\n          }\n          multi_parser.print_token(parser_token.text);\n          if (multi_parser.indent_content) {\n            if ((multi_parser.indent_body_inner_html || parser_token.tag_name !== 'body') &&\n              (multi_parser.indent_head_inner_html || parser_token.tag_name !== 'head')) {\n\n              multi_parser.indent();\n            }\n\n            multi_parser.indent_content = false;\n          }\n          last_tag_token = parser_token;\n          break;\n        case 'TK_TAG_STYLE':\n        case 'TK_TAG_SCRIPT':\n          multi_parser.print_newline(false, multi_parser.output);\n          multi_parser.print_token(parser_token.text);\n          last_tag_token = parser_token;\n          break;\n        case 'TK_TAG_END':\n          if ((parser_token.start_tag_token && parser_token.start_tag_token.multiline_content) ||\n            !(parser_token.is_inline_tag ||\n              (last_tag_token.is_inline_tag) ||\n              (multi_parser.last_token === last_tag_token && last_tag_token.is_opening_tag && parser_token.is_closing_tag && last_tag_token.tag_name === parser_token.tag_name) ||\n              (multi_parser.last_token.type === 'TK_CONTENT')\n            )) {\n            multi_parser.print_newline(false, multi_parser.output);\n          }\n          multi_parser.print_token(parser_token.text);\n          last_tag_token = parser_token;\n          break;\n        case 'TK_TAG_SINGLE':\n          // Don't add a newline before elements that should remain unformatted.\n          if (parser_token.tag_name === '!--' && multi_parser.last_token.is_closing_tag && parser_token.text.indexOf('\\n') === -1) {\n            //Do nothing. Leave comments on same line.\n          } else if (!parser_token.is_inline_tag && !parser_token.is_unformatted) {\n            multi_parser.print_newline(false, multi_parser.output);\n          }\n          multi_parser.print_token(parser_token.text);\n          last_tag_token = parser_token;\n          break;\n        case 'TK_TAG_HANDLEBARS_ELSE':\n          // Don't add a newline if opening {{#if}} tag is on the current line\n          var foundIfOnCurrentLine = false;\n          for (var lastCheckedOutput = multi_parser.output.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n            if (multi_parser.output[lastCheckedOutput] === '\\n') {\n              break;\n            } else {\n              if (multi_parser.output[lastCheckedOutput].match(/{{#if/)) {\n                foundIfOnCurrentLine = true;\n                break;\n              }\n            }\n          }\n          if (!foundIfOnCurrentLine) {\n            multi_parser.print_newline(false, multi_parser.output);\n          }\n          multi_parser.print_token(parser_token.text);\n          if (multi_parser.indent_content) {\n            multi_parser.indent();\n            multi_parser.indent_content = false;\n          }\n          last_tag_token = parser_token;\n          break;\n        case 'TK_TAG_HANDLEBARS_COMMENT':\n          multi_parser.print_token(parser_token.text);\n          break;\n        case 'TK_CONTENT':\n          multi_parser.traverse_whitespace(raw_token);\n          multi_parser.print_token(parser_token.text, true);\n          break;\n        case 'TK_STYLE':\n        case 'TK_SCRIPT':\n          if (parser_token.text !== '') {\n            multi_parser.print_newline(false, multi_parser.output);\n            var text = parser_token.text,\n              _beautifier,\n              script_indent_level = 1;\n            if (parser_token.type === 'TK_SCRIPT') {\n              _beautifier = typeof js_beautify === 'function' && js_beautify;\n            } else if (parser_token.type === 'TK_STYLE') {\n              _beautifier = typeof css_beautify === 'function' && css_beautify;\n            }\n\n            if (options.indent_scripts === \"keep\") {\n              script_indent_level = 0;\n            } else if (options.indent_scripts === \"separate\") {\n              script_indent_level = -multi_parser.indent_level;\n            }\n\n            var indentation = multi_parser.get_full_indent(script_indent_level);\n            if (_beautifier) {\n\n              // call the Beautifier if avaliable\n              var Child_options = function() {\n                this.eol = '\\n';\n              };\n              Child_options.prototype = options;\n              var child_options = new Child_options();\n              text = _beautifier(text.replace(/^\\s*/, indentation), child_options);\n            } else {\n              // simply indent the string otherwise\n              var white = text.match(/^\\s*/)[0];\n              var _level = white.match(/[^\\n\\r]*$/)[0].split(multi_parser.indent_string).length - 1;\n              var reindent = multi_parser.get_full_indent(script_indent_level - _level);\n              text = text.replace(/^\\s*/, indentation)\n                .replace(/\\r\\n|\\r|\\n/g, '\\n' + reindent)\n                .replace(/\\s+$/, '');\n            }\n            if (text) {\n              multi_parser.print_token_raw(text);\n              multi_parser.print_newline(true, multi_parser.output);\n            }\n          }\n          break;\n        default:\n          // We should not be getting here but we don't want to drop input on the floor\n          // Just output the text and move on\n          if (parser_token.text !== '') {\n            multi_parser.print_token(parser_token.text);\n          }\n          break;\n      }\n      multi_parser.last_token = parser_token;\n\n      raw_token = this._tokens.next();\n    }\n    var sweet_code = multi_parser.output.join('').replace(/[\\r\\n\\t ]+$/, '');\n\n    // establish end_with_newline\n    if (end_with_newline) {\n      sweet_code += '\\n';\n    }\n\n    if (eol !== '\\n') {\n      sweet_code = sweet_code.replace(/[\\n]/g, eol);\n    }\n\n    return sweet_code;\n  };\n}\n\nmodule.exports.Beautifier = Beautifier;"],"sourceRoot":""}